diff -r c26b3ea688ee chirp/bandplan.py
--- a/chirp/bandplan.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/bandplan.py	Sat Jun 06 02:06:40 2020 +0800
@@ -34,7 +34,7 @@
                 for tone in tones:
                     assert tone in chirp_common.TONES, (
                         "tone %s not one of %s" % (tone, chirp_common.TONES))
-        except AssertionError, e:
+        except AssertionError as e:
             raise ValueError("%s %s: %s" % (name, limits, e))
 
         self.name = name
diff -r c26b3ea688ee chirp/bitwise.py
--- a/chirp/bitwise.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/bitwise.py	Sat Jun 06 02:06:40 2020 +0800
@@ -91,12 +91,12 @@
             pp(i, level+2)
         elif isinstance(i, tuple):
             if isinstance(i[1], str):
-                print "%s%s: %s" % (" " * level, i[0], i[1])
+                print("%s%s: %s" % (" " * level, i[0], i[1]))
             else:
-                print "%s%s:" % (" " * level, i[0])
+                print("%s%s:" % (" " * level, i[0]))
                 pp(i, level+2)
         elif isinstance(i, str):
-            print "%s%s" % (" " * level, i)
+            print("%s%s" % (" " * level, i))
 
 
 def array_copy(dst, src):
@@ -908,14 +908,14 @@
     data = "\xab\x7F\x81abc\x12\x34"
     tree = parse(defn, data)
 
-    print repr(tree)
+    print(repr(tree))
 
-    print "Foo %i" % tree.mystruct.foo
-    print "Highbit: %i SixZeros: %i: Lowbit: %i" % (tree.mystruct.highbit,
+    print("Foo %i" % tree.mystruct.foo)
+    print("Highbit: %i SixZeros: %i: Lowbit: %i" % tree.mystruct.highbit,
                                                     tree.mystruct.sixzeros,
                                                     tree.mystruct.lowbit)
-    print "String: %s" % tree.mystruct.string
-    print "Fourdigits: %i" % tree.mystruct.fourdigits
+    print("String: %s" % tree.mystruct.string)
+    print("Fourdigits: %i" % tree.mystruct.fourdigits)
 
     import sys
     sys.exit(0)
@@ -941,32 +941,32 @@
 
     ast = bitwise_grammar.parse(test)
 
-    # Just for testing, pretty-print the tree
+    # Just for testing, pretty-print(the tree)
     pp(ast)
 
     # Mess with it a little
     p = Processor(data, 0)
     obj = p.parse(ast)
-    print "Object: %s" % obj
-    print obj["foo"][0]["bcdL"]
-    print obj["tail"]
-    print obj["foo"][0]["bar"]
+    print("Object: %s" % obj)
+    print(obj["foo"][0]["bcdL"])
+    print(obj["tail"])
+    print(obj["foo"][0]["bar"])
     obj["foo"][0]["bar"].set_value(255 << 8)
     obj["foo"][0]["twobit"].set_value(0)
     obj["foo"][0]["onebit"].set_value(1)
-    print "%i" % int(obj["foo"][0]["bar"])
+    print("%i" % int(obj["foo"][0]["bar"]))
 
     for i in obj["foo"][0]["array"]:
-        print int(i)
+        print(int(i))
     obj["foo"][0]["array"][1].set_value(255)
 
     for i in obj["foo"][0]["bcdL"]:
-        print i.get_value()
+        print(i.get_value())
 
     int_to_bcd(obj["foo"][0]["bcdL"], 1234)
-    print bcd_to_int(obj["foo"][0]["bcdL"])
+    print(bcd_to_int(obj["foo"][0]["bcdL"]))
 
     set_string(obj["foo"][0]["str"], "xyz")
-    print get_string(obj["foo"][0]["str"])
+    print(get_string(obj["foo"][0]["str"]))
 
-    print repr(data.get_packed())
+    print(repr(data.get_packed()))
diff -r c26b3ea688ee chirp/chirp_common.py
--- a/chirp/chirp_common.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/chirp_common.py	Sat Jun 06 02:06:40 2020 +0800
@@ -976,7 +976,7 @@
                     msg = ValidationError("Frequency requires %.2fkHz step" %
                                           required_step(mem.freq))
                     msgs.append(msg)
-            except errors.InvalidDataError, e:
+            except errors.InvalidDataError as e:
                 msgs.append(str(e))
 
         if self.valid_characters:
diff -r c26b3ea688ee chirp/detect.py
--- a/chirp/detect.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/detect.py	Sat Jun 06 02:06:40 2020 +0800
@@ -42,7 +42,7 @@
         ser.baudrate = 9600
         md = icf.get_model_data(ser)
         return _icom_model_data_to_rclass(md)
-    except errors.RadioError, e:
+    except errors.RadioError as e:
         LOG.error("_detect_icom_radio: %s", e)
 
     # ICOM IC-91/92 Live-mode radios @ 4800/38400 baud
diff -r c26b3ea688ee chirp/dmrmarc.py
--- a/chirp/dmrmarc.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/dmrmarc.py	Sat Jun 06 02:06:40 2020 +0800
@@ -116,7 +116,7 @@
 
 def main():
     import argparse
-    from pprint import PrettyPrinter
+    from pprint(import PrettyPrinter)
 
     parser = argparse.ArgumentParser(description="Fetch DMR-MARC repeater "
         "database and filter by city, state, and/or country. Multiple items "
diff -r c26b3ea688ee chirp/drivers/alinco.py
--- a/chirp/drivers/alinco.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/alinco.py	Sat Jun 06 02:06:40 2020 +0800
@@ -199,7 +199,7 @@
             self._mmap = self._download(self._memsize)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -208,7 +208,7 @@
             self._upload(self._memsize)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def get_raw_memory(self, number):
diff -r c26b3ea688ee chirp/drivers/anytone.py
--- a/chirp/drivers/anytone.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/anytone.py	Sat Jun 06 02:06:40 2020 +0800
@@ -177,7 +177,7 @@
     try:
         radio.pipe.write(data)
         radio.pipe.read(len(data))
-    except Exception, e:
+    except Exception as e:
         LOG.error("Error writing to radio: %s" % e)
         raise errors.RadioError("Unable to write to radio")
 
@@ -185,7 +185,7 @@
 def _read(radio, length):
     try:
         data = radio.pipe.read(length)
-    except Exception, e:
+    except Exception as e:
         LOG.error("Error reading from radio: %s" % e)
         raise errors.RadioError("Unable to read from radio")
 
diff -r c26b3ea688ee chirp/drivers/anytone_ht.py
--- a/chirp/drivers/anytone_ht.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/anytone_ht.py	Sat Jun 06 02:06:40 2020 +0800
@@ -233,7 +233,7 @@
 def _echo_write(radio, data):
     try:
         radio.pipe.write(data)
-    except Exception, e:
+    except Exception as e:
         LOG.error("Error writing to radio: %s" % e)
         raise errors.RadioError("Unable to write to radio")
 
@@ -241,7 +241,7 @@
 def _read(radio, length):
     try:
         data = radio.pipe.read(length)
-    except Exception, e:
+    except Exception as e:
         LOG.error("Error reading from radio: %s" % e)
         raise errors.RadioError("Unable to read from radio")
 
@@ -930,7 +930,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/ap510.py
--- a/chirp/drivers/ap510.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ap510.py	Sat Jun 06 02:06:40 2020 +0800
@@ -242,7 +242,7 @@
 
 class AP510Memory20141215(AP510Memory):
     """Compatible with firmware version 20141215"""
-    ATTR_MAP = dict(AP510Memory.ATTR_MAP.items() + {
+    ATTR_MAP = dict(AP510Memory.ATTR_MAP.items() | {
         'tx_volume': '21',  # 1-6
         'rx_volume': '22',  # 1-9
         'tx_power': '23',  # 1: 1 watt,  0: 0.5 watt
@@ -380,7 +380,7 @@
             data = download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
         # _mmap isn't a Chirp MemoryMap, but since AP510Memory implements
@@ -398,7 +398,7 @@
             upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def load_mmap(self, filename):
diff -r c26b3ea688ee chirp/drivers/baofeng_common.py
--- a/chirp/drivers/baofeng_common.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/baofeng_common.py	Sat Jun 06 02:06:40 2020 +0800
@@ -164,8 +164,8 @@
         try:
             data = _do_ident(radio, magic)
             return data
-        except errors.RadioError, e:
-            print e
+        except errors.RadioError as e:
+            print(e)
             error = e
             time.sleep(2)
     if error:
@@ -336,7 +336,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             # If anything unexpected happens, make sure we raise
             # a RadioError and log the problem
             LOG.exception('Unexpected error during upload')
@@ -622,7 +622,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -636,6 +636,6 @@
                     value = int(val.get_value() * 10)
                 LOG.debug("Setting fm_presets = %s" % (value))
                 self._memobj.fm_presets = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/baofeng_uv3r.py
--- a/chirp/drivers/baofeng_uv3r.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/baofeng_uv3r.py	Sat Jun 06 02:06:40 2020 +0800
@@ -19,7 +19,7 @@
 import os
 import logging
 
-from wouxun_common import do_download, do_upload
+from chirp.drivers.wouxun_common import do_download, do_upload
 from chirp import util, chirp_common, bitwise, errors, directory
 from chirp.settings import RadioSetting, RadioSettingGroup, \
                 RadioSettingValueBoolean, RadioSettingValueList, \
@@ -51,7 +51,7 @@
     for _i in range(0, 10):
         try:
             return _uv3r_prep(radio)
-        except errors.RadioError, e:
+        except errors.RadioError as e:
             time.sleep(1)
 
     raise e
@@ -64,7 +64,7 @@
         return do_download(radio, 0x0000, 0x0E40, 0x0010)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 
@@ -75,7 +75,7 @@
         return do_upload(radio, 0x0000, 0x0E40, 0x0010)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 
@@ -623,7 +623,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -639,7 +639,7 @@
                 LOG.debug("Setting fm_presets[%1i] = %s" % (index, value))
                 setting = self._memobj.fm_presets
                 setting[index] = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/bf-t1.py
--- a/chirp/drivers/bf-t1.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/bf-t1.py	Sat Jun 06 02:06:40 2020 +0800
@@ -225,7 +225,7 @@
 
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Error sending Magic to radio:\n%s" % e)
 
 
@@ -561,7 +561,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Error: %s" % e)
 
     def _decode_tone(self, val, inv):
@@ -894,7 +894,7 @@
                     setattr(_settings, name, value)
 
                 LOG.debug("Setting %s: %s" % (name, value))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/bj9900.py
--- a/chirp/drivers/bj9900.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/bj9900.py	Sat Jun 06 02:06:40 2020 +0800
@@ -178,7 +178,7 @@
             self._mmap = self._clone_in()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -187,7 +187,7 @@
             self._clone_out()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
diff -r c26b3ea688ee chirp/drivers/bjuv55.py
--- a/chirp/drivers/bjuv55.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/bjuv55.py	Sat Jun 06 02:06:40 2020 +0800
@@ -647,6 +647,6 @@
                 value = int(val.get_value() * 10 - 870)
                 LOG.debug("Setting fm_preset = %s" % (value))
                 self._memobj.fm_preset = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/btech.py
--- a/chirp/drivers/btech.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/btech.py	Sat Jun 06 02:06:40 2020 +0800
@@ -419,7 +419,7 @@
 
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Error sending Magic to radio:\n%s" % e)
 
 
@@ -787,7 +787,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Error: %s" % e)
 
     def get_raw_memory(self, number):
@@ -2914,7 +2914,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/fd268.py
--- a/chirp/drivers/fd268.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/fd268.py	Sat Jun 06 02:06:40 2020 +0800
@@ -790,11 +790,11 @@
                         obj = getattr(_mem, sett)
                         setattr(obj, name, element.value)
 
-                    except AttributeError, e:
+                    except AttributeError as e:
                         m = "Setting %s is not in this setting block" % name
                         LOG.debug(m)
 
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft1d.py
--- a/chirp/drivers/ft1d.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft1d.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1890,7 +1890,7 @@
                 except AttributeError as e:
                     LOG.error("Setting %s is not in the memory map: %s" %
                               (element.get_name(), e))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft2800.py
--- a/chirp/drivers/ft2800.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft2800.py	Sat Jun 06 02:06:40 2020 +0800
@@ -18,7 +18,7 @@
 import logging
 
 from chirp import util, memmap, chirp_common, bitwise, directory, errors
-from yaesu_clone import YaesuCloneModeRadio
+from chirp.drivers.yaesu_clone import YaesuCloneModeRadio
 
 LOG = logging.getLogger(__name__)
 
@@ -201,7 +201,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Downloaded in %.2f sec" % (time.time() - start))
         self.process_mmap()
@@ -214,7 +214,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Uploaded in %.2f sec" % (time.time() - start))
 
diff -r c26b3ea688ee chirp/drivers/ft2900.py
--- a/chirp/drivers/ft2900.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft2900.py	Sat Jun 06 02:06:40 2020 +0800
@@ -537,7 +537,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Downloaded in %.2f sec" % (time.time() - start))
         self.process_mmap()
@@ -549,7 +549,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Uploaded in %.2f sec" % (time.time() - start))
 
@@ -1210,7 +1210,7 @@
                     setattr(_settings, name, value)
 
                 LOG.debug("Setting %s: %s" % (name, value))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft450d.py
--- a/chirp/drivers/ft450d.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft450d.py	Sat Jun 06 02:06:40 2020 +0800
@@ -304,13 +304,13 @@
         struct mem_struct current;
 
     """
-    _CALLSIGN_CHARSET = [chr(x) for x in range(ord("0"), ord("9") + 1) +
-                        range(ord("A"), ord("Z") + 1) + [ord(" ")]]
+    _CALLSIGN_CHARSET = [chr(x) for x in [*range(ord("0"), ord("9") + 1),
+                        *range(ord("A"), ord("Z") + 1), ord(" ")]]
     _CALLSIGN_CHARSET_REV = dict(zip(_CALLSIGN_CHARSET,
                                      range(0, len(_CALLSIGN_CHARSET))))
 
     # WARNING Indecis are hard wired in get/set_memory code !!!
-    # Channels print in + increasing index order (PMS first)
+    # Channels print(in + increasing index order (PMS first))
     SPECIAL_MEMORIES = {
         "VFOa-1.8M": -27,
         "VFOa-3.5M": -26,
@@ -499,7 +499,7 @@
             self._mmap = self._clone_in()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s"
                                     % e)
         self.process_mmap()
@@ -509,7 +509,7 @@
             self._clone_out()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s"
                                     % e)
 
@@ -1489,6 +1489,6 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
diff -r c26b3ea688ee chirp/drivers/ft50.py
--- a/chirp/drivers/ft50.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft50.py	Sat Jun 06 02:06:40 2020 +0800
@@ -586,7 +586,7 @@
 def _clone_out(radio):
     try:
         return __clone_out(radio)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
 
diff -r c26b3ea688ee chirp/drivers/ft60.py
--- a/chirp/drivers/ft60.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft60.py	Sat Jun 06 02:06:40 2020 +0800
@@ -403,7 +403,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
         self.check_checksums()
@@ -414,7 +414,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
@@ -716,7 +716,7 @@
                     setattr(_settings, name, value)
 
                 LOG.debug("Setting %s: %s" % (name, value))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft70.py
--- a/chirp/drivers/ft70.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft70.py	Sat Jun 06 02:06:40 2020 +0800
@@ -528,7 +528,7 @@
     _GM_RING = ("OFF", "IN RING", "AlWAYS")
     _GM_INTERVAL = ("LONG", "NORMAL", "OFF")
 
-    _MYCALL_CHR_SET = list(string.uppercase) + list(string.digits) + ['-','/' ]
+    _MYCALL_CHR_SET = list(string.ascii_uppercase) + list(string.digits) + ['-','/' ]
 
     @classmethod
     def get_prompts(cls):
@@ -1162,7 +1162,7 @@
                 except AttributeError as e:
                     LOG.error("Setting %s is not in the memory map: %s" %
                               (element.get_name(), e))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft7100.py
--- a/chirp/drivers/ft7100.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft7100.py	Sat Jun 06 02:06:40 2020 +0800
@@ -568,7 +568,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Downloaded in %.2f sec", (time.time() - start))
         self.process_mmap()
@@ -580,7 +580,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Uploaded in %.2f sec", (time.time() - start))
 
@@ -1091,7 +1091,7 @@
                     setattr(_overlay, name, value)
 
                 LOG.debug("Setting %s: %s", name, value)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft7800.py
--- a/chirp/drivers/ft7800.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft7800.py	Sat Jun 06 02:06:40 2020 +0800
@@ -321,7 +321,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Download finished in %i seconds" % (time.time() - start))
         self.check_checksums()
@@ -337,7 +337,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         LOG.info("Upload finished in %i seconds" % (time.time() - start))
 
@@ -766,7 +766,7 @@
                 oldval = getattr(_settings, setting)
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/ft8100.py
--- a/chirp/drivers/ft8100.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft8100.py	Sat Jun 06 02:06:40 2020 +0800
@@ -175,7 +175,7 @@
 
         if _mem.duplex == DUPLEX.index("split"):
             tx_freq = int(_mem.offset) * 1000
-            print self.VARIANT, number, tx_freq, mem.freq
+            print(self.VARIANT, number, tx_freq, mem.freq)
             mem.offset = tx_freq - mem.freq
         else:
             mem.offset = int(_mem.offset) * 1000
@@ -189,7 +189,7 @@
         if not self._memobj.enables[byte] & bit and number != 1:
             mem.empty = True
 
-        print 'R', self.VARIANT, number, _mem.baud9600
+        print('R', self.VARIANT, number, _mem.baud9600)
 
         return mem
 
@@ -270,7 +270,7 @@
 def _clone_out(radio):
     try:
         return __clone_out(radio)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
 
@@ -291,7 +291,7 @@
     pos = 0
     for block in radio._block_lengths:
         if os.getenv("CHIRP_DEBUG"):
-            print "\nSending %i-%i" % (pos, pos + block)
+            print("\nSending %i-%i" % (pos, pos + block))
         out = radio.get_mmap()[pos:pos + block]
 
         # need to chew byte-by-byte here or else we lose the ACK...not sure why
@@ -309,6 +309,6 @@
 
         pos += block
 
-    print "Clone completed in %i seconds" % (time.time() - start)
+    print("Clone completed in %i seconds" % (time.time() - start))
 
     return True
diff -r c26b3ea688ee chirp/drivers/ft817.py
--- a/chirp/drivers/ft817.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft817.py	Sat Jun 06 02:06:40 2020 +0800
@@ -215,8 +215,8 @@
         #seekto 0x1979;
         struct mem_struct sixtymeterchannels[5];
     """
-    _CALLSIGN_CHARSET = [chr(x) for x in range(ord("0"), ord("9") + 1) +
-                         range(ord("A"), ord("Z") + 1) + [ord(" ")]]
+    _CALLSIGN_CHARSET = [chr(x) for x in [*range(ord("0"), ord("9") + 1),
+                         *range(ord("A"), ord("Z") + 1), ord(" ")]]
     _CALLSIGN_CHARSET_REV = dict(zip(_CALLSIGN_CHARSET,
                                      range(0, len(_CALLSIGN_CHARSET))))
 
@@ -413,7 +413,7 @@
             self._mmap = self._clone_in()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -422,7 +422,7 @@
             self._clone_out()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
diff -r c26b3ea688ee chirp/drivers/ft857.py
--- a/chirp/drivers/ft857.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft857.py	Sat Jun 06 02:06:40 2020 +0800
@@ -314,8 +314,8 @@
 
     """
 
-    _CALLSIGN_CHARSET = [chr(x) for x in range(ord("0"), ord("9") + 1) +
-                         range(ord("A"), ord("Z") + 1)] + [" ", "/"]
+    _CALLSIGN_CHARSET = [x for x in [*range(ord("0"), ord("9") + 1),
+                         *range(ord("A"), ord("Z") + 1), " ", "/"]]
     _CALLSIGN_CHARSET_REV = dict(zip(_CALLSIGN_CHARSET,
                                  range(0, len(_CALLSIGN_CHARSET))))
     _BEACON_CHARSET = _CALLSIGN_CHARSET + ["+", "."]
diff -r c26b3ea688ee chirp/drivers/ft90.py
--- a/chirp/drivers/ft90.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ft90.py	Sat Jun 06 02:06:40 2020 +0800
@@ -52,7 +52,7 @@
                          chirp_common.PowerLevel("Low", watts=5)]
 
 FT90_DUPLEX = ["", "-", "+", "split"]
-FT90_CWID_CHARS = list(string.digits) + list(string.uppercase) + list(" ")
+FT90_CWID_CHARS = list(string.digits) + list(string.ascii_uppercase) + list(" ")
 FT90_DTMF_CHARS = list("0123456789ABCD*#")
 FT90_SPECIAL = ["vfo_vhf", "home_vhf", "vfo_uhf", "home_uhf",
                 "pms_1L", "pms_1U", "pms_2L", "pms_2U"]
@@ -332,7 +332,7 @@
             self._mmap = self._clone_in()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             trace = traceback.format_exc()
             raise errors.RadioError(
                     "Failed to communicate with radio: %s" % trace)
@@ -343,7 +343,7 @@
             self._clone_out()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             trace = traceback.format_exc()
             raise errors.RadioError(
                     "Failed to communicate with radio: %s" % trace)
@@ -670,6 +670,6 @@
                     newval = self._dtmf2bbcd(newval)
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/ftm350.py
--- a/chirp/drivers/ftm350.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ftm350.py	Sat Jun 06 02:06:40 2020 +0800
@@ -278,7 +278,7 @@
             self._mmap = _clone_in(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to download from radio (%s)" % e)
         self.process_mmap()
 
@@ -287,7 +287,7 @@
             _clone_out(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to upload to radio (%s)" % e)
 
     def process_mmap(self):
diff -r c26b3ea688ee chirp/drivers/generic_csv.py
--- a/chirp/drivers/generic_csv.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/generic_csv.py	Sat Jun 06 02:06:40 2020 +0800
@@ -160,9 +160,9 @@
                     val = typ(val)
                 if hasattr(mem, attr):
                     setattr(mem, attr, val)
-            except OmittedHeaderError, e:
+            except OmittedHeaderError as e:
                 pass
-            except Exception, e:
+            except Exception as e:
                 raise Exception("[%s] %s" % (attr, e))
 
         return self._clean(headers, line, mem)
@@ -203,7 +203,7 @@
                 mem = self._parse_csv_data_line(header, line)
                 if mem.number is None:
                     raise Exception("Invalid Location field" % lineno)
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Line %i: %s", lineno, e)
                 self.errors.append("Line %i: %s" % (lineno, e))
                 continue
diff -r c26b3ea688ee chirp/drivers/generic_tpe.py
--- a/chirp/drivers/generic_tpe.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/generic_tpe.py	Sat Jun 06 02:06:40 2020 +0800
@@ -13,7 +13,7 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import UserDict
+from collections import UserDict
 from chirp import chirp_common, directory
 from chirp.drivers import generic_csv
 
diff -r c26b3ea688ee chirp/drivers/generic_xml.py
--- a/chirp/drivers/generic_xml.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/generic_xml.py	Sat Jun 06 02:06:40 2020 +0800
@@ -29,7 +29,7 @@
     try:
         ctx = libxml2.schemaNewParserCtxt(path)
         schema = ctx.schemaParse()
-    except libxml2.parserError, e:
+    except libxml2.parserError as e:
         LOG.error("Unable to load schema: %s" % e)
         LOG.error("Path: %s" % path)
         raise errors.RadioError("Unable to load schema")
diff -r c26b3ea688ee chirp/drivers/h777.py
--- a/chirp/drivers/h777.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/h777.py	Sat Jun 06 02:06:40 2020 +0800
@@ -575,7 +575,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/ic208.py
--- a/chirp/drivers/ic208.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ic208.py	Sat Jun 06 02:06:40 2020 +0800
@@ -75,10 +75,10 @@
     IC208_SPECIAL.append("%iA" % i)
     IC208_SPECIAL.append("%iB" % i)
 
-CHARSET = dict(zip([0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0d, 0x0f], " ()*+-/") +
-               zip(range(0x10, 0x1a), "0123456789") +
-               [(0x1c, '|'), (0x1d, '=')] +
-               zip(range(0x21, 0x3b), "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
+CHARSET = dict({*zip([0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0d, 0x0f], " ()*+-/"),
+               *zip(range(0x10, 0x1a), "0123456789"),
+               (0x1c, '|'), (0x1d, '='),
+                *zip(range(0x21, 0x3b), "ABCDEFGHIJKLMNOPQRSTUVWXYZ")})
 CHARSET_REV = dict(zip(CHARSET.values(), CHARSET.keys()))
 
 
diff -r c26b3ea688ee chirp/drivers/ic2730.py
--- a/chirp/drivers/ic2730.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ic2730.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1286,6 +1286,6 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
diff -r c26b3ea688ee chirp/drivers/ic9x.py
--- a/chirp/drivers/ic9x.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ic9x.py	Sat Jun 06 02:06:40 2020 +0800
@@ -181,7 +181,7 @@
                 LOG.debug("Done: %s" % mem)
             except errors.InvalidMemoryLocation:
                 pass
-            except errors.InvalidDataError, e:
+            except errors.InvalidDataError as e:
                 LOG.error("Error talking to radio: %s" % e)
                 break
 
@@ -417,8 +417,8 @@
     import serial
     ser = IC9xRadioB(serial.Serial(port="/dev/ttyUSB1",
                                    baudrate=38400, timeout=0.1))
-    print ser.get_urcall_list()
-    print "-- FOO --"
+    print(ser.get_urcall_list())
+    print("-- FOO --")
     ser.set_urcall_list(["K7TAY", "FOOBAR", "BAZ"])
 
 
diff -r c26b3ea688ee chirp/drivers/ic9x_ll.py
--- a/chirp/drivers/ic9x_ll.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ic9x_ll.py	Sat Jun 06 02:06:40 2020 +0800
@@ -60,7 +60,7 @@
         try:
             start = buf.index("\xfe\xfe")
             end = buf[start:].index("\xfd") + start + 1
-        except Exception, e:
+        except Exception as e:
             LOG.error("No trailing bit")
             break
 
@@ -71,7 +71,7 @@
             frame = IC92Frame()
             frame.from_raw(framedata[2:-1])
             frames.append(frame)
-        except errors.InvalidDataError, e:
+        except errors.InvalidDataError as e:
             LOG.error("Broken frame: %s" % e)
 
         # LOG.debug("Parsed %i frames" % len(frames))
diff -r c26b3ea688ee chirp/drivers/icf.py
--- a/chirp/drivers/icf.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/icf.py	Sat Jun 06 02:06:40 2020 +0800
@@ -109,7 +109,7 @@
                     frames.append(frame)
 
                 self.data = rest
-            except errors.InvalidDataError, e:
+            except errors.InvalidDataError as e:
                 LOG.error("Failed to parse frame (cmd=%i): %s" % (cmd, e))
                 return []
 
@@ -314,7 +314,7 @@
     """Do a full clone out of the radio's memory"""
     try:
         return _clone_from_radio(radio)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
 
@@ -405,7 +405,7 @@
     """Initiate a full memory clone out to @radio"""
     try:
         return _clone_to_radio(radio)
-    except Exception, e:
+    except Exception as e:
         logging.exception("Failed to communicate with the radio")
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
@@ -450,7 +450,7 @@
             val = int("%s%s" % (data[i], data[i+1]), 16)
             i += 2
             _mmap += struct.pack("B", val)
-        except ValueError, e:
+        except ValueError as e:
             LOG.debug("Failed to parse byte: %s" % e)
             break
 
@@ -642,7 +642,7 @@
                 val = int("%s%s" % (bcddata[i], bcddata[i+1]), 16)
                 i += 2
                 data += struct.pack("B", val)
-            except ValueError, e:
+            except ValueError as e:
                 LOG.error("Failed to parse byte: %s" % e)
                 break
 
diff -r c26b3ea688ee chirp/drivers/icq7.py
--- a/chirp/drivers/icq7.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/icq7.py	Sat Jun 06 02:06:40 2020 +0800
@@ -344,6 +344,6 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
diff -r c26b3ea688ee chirp/drivers/icx90.py
--- a/chirp/drivers/icx90.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/icx90.py	Sat Jun 06 02:06:40 2020 +0800
@@ -17,7 +17,7 @@
 
 import logging
 
-import icf
+from chirp.drivers import icf
 import struct
 from chirp import chirp_common, bitwise, errors, directory
 from chirp.memmap import MemoryMap
@@ -596,7 +596,7 @@
                 except AttributeError as e:
                     LOG.error("Setting %s is not in the memory map: %s" %
                               (element.get_name(), e))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/id31.py
--- a/chirp/drivers/id31.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/id31.py	Sat Jun 06 02:06:40 2020 +0800
@@ -332,6 +332,6 @@
         return calls
 
 if __name__ == "__main__":
-    print repr(_decode_call(_encode_call("KD7REX B")))
-    print repr(_decode_call(_encode_call("       B")))
-    print repr(_decode_call(_encode_call("        ")))
+    print(repr(_decode_call(_encode_call("KD7REX B"))))
+    print(repr(_decode_call(_encode_call("       B"))))
+    print(repr(_decode_call(_encode_call("        "))))
diff -r c26b3ea688ee chirp/drivers/kenwood_hmk.py
--- a/chirp/drivers/kenwood_hmk.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kenwood_hmk.py	Sat Jun 06 02:06:40 2020 +0800
@@ -114,7 +114,7 @@
                 mem = self._parse_csv_data_line(header, line)
                 if mem.number is None:
                     raise Exception("Invalid Location field" % lineno)
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Line %i: %s" % (lineno, e))
                 self.errors.append("Line %i: %s" % (lineno, e))
                 continue
diff -r c26b3ea688ee chirp/drivers/kenwood_itm.py
--- a/chirp/drivers/kenwood_itm.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kenwood_itm.py	Sat Jun 06 02:06:40 2020 +0800
@@ -118,7 +118,7 @@
                 mem = self._parse_csv_data_line(header, line)
                 if mem.number is None:
                     raise Exception("Invalid Location field" % lineno)
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Line %i: %s" % (lineno, e))
                 self.errors.append("Line %i: %s" % (lineno, e))
                 continue
diff -r c26b3ea688ee chirp/drivers/kguv8d.py
--- a/chirp/drivers/kguv8d.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kguv8d.py	Sat Jun 06 02:06:40 2020 +0800
@@ -376,7 +376,7 @@
             self._mmap = self._download()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -393,7 +393,7 @@
             return self._do_download(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             LOG.exception('Unknown error during download process')
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
@@ -426,7 +426,7 @@
             self._do_upload(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         return
 
diff -r c26b3ea688ee chirp/drivers/kguv8dplus.py
--- a/chirp/drivers/kguv8dplus.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kguv8dplus.py	Sat Jun 06 02:06:40 2020 +0800
@@ -418,7 +418,7 @@
             self._mmap = self._download()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -435,7 +435,7 @@
             return self._do_download(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             LOG.exception('Unknown error during download process')
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
@@ -467,7 +467,7 @@
             self._do_upload(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         return
 
@@ -1103,7 +1103,7 @@
                             setattr(obj, setting, int(element.value)/10)
                         else:
                             setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/kguv8e.py
--- a/chirp/drivers/kguv8e.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kguv8e.py	Sat Jun 06 02:06:40 2020 +0800
@@ -337,7 +337,7 @@
 
         try:
             self.pipe.write(_header)
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def _read_record(self):
@@ -423,7 +423,7 @@
             self._mmap = self._download()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -440,7 +440,7 @@
             return self._do_download(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             LOG.exception('Unknown error during download process')
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
@@ -472,7 +472,7 @@
             self._do_upload(0, 32768, 64)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         return
 
@@ -1138,7 +1138,7 @@
                             setattr(obj, setting, int(element.value)/10)
                         else:
                             setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/kguv9dplus.py
--- a/chirp/drivers/kguv9dplus.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kguv9dplus.py	Sat Jun 06 02:06:40 2020 +0800
@@ -877,7 +877,7 @@
             self._write_record(CMD_HANGUP)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             LOG.exception('Unknown error during download process')
             raise errors.RadioError(
                 "Failed to communicate with radio: %s" % e)
@@ -894,7 +894,7 @@
             self._write_record(CMD_HANGUP)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError(
                 "Failed to communicate with radio: %s" % e)
         return
@@ -1887,7 +1887,7 @@
                             setattr(obj, setting, int(element.value)/10)
                         else:
                             setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug("set_settings: Exception with %s" %
                               element.get_name())
                     raise
diff -r c26b3ea688ee chirp/drivers/kyd.py
--- a/chirp/drivers/kyd.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kyd.py	Sat Jun 06 02:06:40 2020 +0800
@@ -500,7 +500,7 @@
 
                     LOG.debug("Setting %s = %s" % (setting, element.value))
                     setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/kyd_IP620.py
--- a/chirp/drivers/kyd_IP620.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/kyd_IP620.py	Sat Jun 06 02:06:40 2020 +0800
@@ -181,7 +181,7 @@
             self.pipe.write("\x06")
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Radio refused to exit programming mode: %s" % e)
 
     def _ip620_enter_programming_mode(self):
@@ -192,7 +192,7 @@
             _ack = self.pipe.read(1)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Error communicating with radio: %s" % e)
         if not _ack:
             raise errors.RadioError("No response from radio")
@@ -203,17 +203,17 @@
             _ident = self.pipe.read(8)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Error communicating with radio: %s" % e)
         if not _ident.startswith("\x06\x4B\x47\x36\x37\x01\x56\xF8"):
-            print util.hexprint(_ident)
+            print(util.hexprint(_ident))
             raise errors.RadioError("Radio returned unknown identification string")
         try:
             self.pipe.write(CMD_ACK)
             _ack = self.pipe.read(1)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Error communicating with radio: %s" % e)
         if _ack != CMD_ACK:
             raise errors.RadioError("Radio refused to enter programming mode")
@@ -316,7 +316,7 @@
             self._mmap = self._do_download()
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -597,7 +597,7 @@
                 setattr(self._memobj.settings_misc,
                         element.get_name(),
                         element.value)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -624,6 +624,6 @@
                     setattr(_settings_misc, setting, newval)
                 else:
                     setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/leixen.py
--- a/chirp/drivers/leixen.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/leixen.py	Sat Jun 06 02:06:40 2020 +0800
@@ -226,8 +226,8 @@
                    ]
 
 MODES = ["NFM", "FM"]
-WTFTONES = map(float, xrange(56, 64))
-TONES = WTFTONES + chirp_common.TONES
+WTFTONES = map(float, range(56, 64))
+TONES = [*WTFTONES, *chirp_common.TONES]
 DTCS_CODES = [17, 50, 645] + chirp_common.DTCS_CODES
 DTCS_CODES.sort()
 TMODES = ["", "Tone", "DTCS", "DTCS"]
@@ -261,7 +261,7 @@
     #            util.hexprint(frame).replace("\n", "\n          ")))
     try:
         radio.pipe.write(frame)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 
@@ -427,7 +427,7 @@
     def sync_in(self):
         try:
             self._mmap = do_download(self)
-        except Exception, e:
+        except Exception as e:
             finish(self)
             raise errors.RadioError("Failed to download from radio: %s" % e)
         self.process_mmap()
@@ -442,7 +442,7 @@
         except errors.RadioError:
             finish(self)
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to upload to radio: %s" % e)
 
     def get_raw_memory(self, number):
@@ -941,7 +941,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/lt725uv.py
--- a/chirp/drivers/lt725uv.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/lt725uv.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1393,7 +1393,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/puxing.py
--- a/chirp/drivers/puxing.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/puxing.py	Sat Jun 06 02:06:40 2020 +0800
@@ -47,7 +47,7 @@
     for _i in range(0, 10):
         try:
             return _puxing_prep(radio)
-        except Exception, e:
+        except Exception as e:
             time.sleep(1)
 
     raise e
@@ -60,7 +60,7 @@
         return do_download(radio, 0x0000, 0x0C60, 0x0008)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 
@@ -71,7 +71,7 @@
         return do_upload(radio, 0x0000, 0x0C40, 0x0008)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 POWER_LEVELS = [chirp_common.PowerLevel("High", watts=5.00),
@@ -372,7 +372,7 @@
         return do_download(radio, 0x0000, 0x0FE0, 0x0010)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 
@@ -383,7 +383,7 @@
         return do_upload(radio, 0x0000, 0x0FE0, 0x0010)
     except errors.RadioError:
         raise
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
 PUXING_2R_MEM_FORMAT = """
diff -r c26b3ea688ee chirp/drivers/puxing_px888k.py
--- a/chirp/drivers/puxing_px888k.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/puxing_px888k.py	Sat Jun 06 02:06:40 2020 +0800
@@ -527,7 +527,7 @@
 TONE_RESET_TIME = ['Off'] + ['%ds' % x for x in range(1, 256)]
 DTMF_TONE_RESET_TIME = TONE_RESET_TIME[0:16]
 
-DTMF_GROUPS = zip(["Off", "A", "B", "C", "D", "*", "#"], [255]+range(10, 16))
+DTMF_GROUPS = zip(["Off", "A", "B", "C", "D", "*", "#"], [255, *range(10, 16)])
 FIVE_TONE_STANDARDS = ['ZVEI1', 'ZVEI2', 'CCIR1', 'CCITT']
 
 # should mimic the defaults in the memedit MemoryEditor somewhat
@@ -543,10 +543,10 @@
 DTMF_ALERT_TRANSPOND = zip(['Off', 'Call alert',
                             'Transpond-alert',
                             'Transpond-ID code'],
-                           [255]+range(1, 4))
+                           [255, *range(1, 4)])
 FIVE_TONE_ALERT_TRANSPOND = zip(['Off', 'Alert tone',
                                  'Transpond', 'Transpond-ID code'],
-                                [255]+range(1, 4))
+                                [255, *range(1, 4)])
 
 BFM_BANDS = ['87.5-108MHz', '76.0-91.0MHz', '76.0-108.0MHz', '65.0-76.0MHz']
 BFM_STRIDE = ['100kHz', '50kHz']
diff -r c26b3ea688ee chirp/drivers/radioddity_r2.py
--- a/chirp/drivers/radioddity_r2.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/radioddity_r2.py	Sat Jun 06 02:06:40 2020 +0800
@@ -611,7 +611,7 @@
 
                     LOG.debug("Setting %s = %s" % (setting, element.value))
                     setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/radtel_t18.py
--- a/chirp/drivers/radtel_t18.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/radtel_t18.py	Sat Jun 06 02:06:40 2020 +0800
@@ -478,7 +478,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/retevis_rt1.py
--- a/chirp/drivers/retevis_rt1.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/retevis_rt1.py	Sat Jun 06 02:06:40 2020 +0800
@@ -726,7 +726,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/retevis_rt21.py
--- a/chirp/drivers/retevis_rt21.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/retevis_rt21.py	Sat Jun 06 02:06:40 2020 +0800
@@ -561,7 +561,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
                     
diff -r c26b3ea688ee chirp/drivers/retevis_rt22.py
--- a/chirp/drivers/retevis_rt22.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/retevis_rt22.py	Sat Jun 06 02:06:40 2020 +0800
@@ -605,7 +605,7 @@
 
                     LOG.debug("Setting %s = %s" % (setting, element.value))
                     setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/retevis_rt23.py
--- a/chirp/drivers/retevis_rt23.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/retevis_rt23.py	Sat Jun 06 02:06:40 2020 +0800
@@ -846,7 +846,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/retevis_rt26.py
--- a/chirp/drivers/retevis_rt26.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/retevis_rt26.py	Sat Jun 06 02:06:40 2020 +0800
@@ -897,7 +897,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/rfinder.py
--- a/chirp/drivers/rfinder.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/rfinder.py	Sat Jun 06 02:06:40 2020 +0800
@@ -240,7 +240,7 @@
                 dist = distance(self.__lat, self.__lon, lat, lon)
                 bear = fuzzy_to(self.__lat, self.__lon, lat, lon)
                 mem.comment = "(%imi %s) %s" % (dist, bear, mem.comment)
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Failed to calculate distance: %s" % e)
 
         return mem
@@ -258,7 +258,7 @@
                 mem.number = number
                 number += 1
                 self.__memories.append(mem)
-            except Exception, e:
+            except Exception as e:
                 import traceback
                 LOG.error(traceback.format_exc())
                 LOG.error("Error in received data, cannot continue")
@@ -287,7 +287,7 @@
 
         self._rfp = None
 
-    def set_params(self, (lat, lon), miles, email, password):
+    def set_params(self, lat, lon, miles, email, password):
         """Sets the parameters to use for the query"""
         self._lat = lat
         self._lon = lon
diff -r c26b3ea688ee chirp/drivers/rh5r_v2.py
--- a/chirp/drivers/rh5r_v2.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/rh5r_v2.py	Sat Jun 06 02:06:40 2020 +0800
@@ -167,7 +167,7 @@
                 filedata[0x840:0x848] == cls._FILEID)
 
     def process_mmap(self):
-        print MEM_FORMAT
+        print(MEM_FORMAT)
         self._memobj = bitwise.parse(MEM_FORMAT, self._mmap)
 
     def get_raw_memory(self, number):
diff -r c26b3ea688ee chirp/drivers/tdxone_tdq8a.py
--- a/chirp/drivers/tdxone_tdq8a.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tdxone_tdq8a.py	Sat Jun 06 02:06:40 2020 +0800
@@ -301,8 +301,8 @@
         try:
             data = _do_ident(radio, magic)
             return data
-        except errors.RadioError, e:
-            print e
+        except errors.RadioError as e:
+            print(e)
             error = e
             time.sleep(2)
     if error:
@@ -426,7 +426,7 @@
 
     if len(data) == 0x2008:
         rid = data[0x2000:0x2008]
-        print rid
+        print(rid)
         return rid.startswith(cls.MODEL)
     else:
         return False
@@ -1117,7 +1117,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -1131,7 +1131,7 @@
                     value = int(val.get_value() * 10)
                 LOG.debug("Setting fm_presets = %s" % (value))
                 self._memobj.fm_presets = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/th350.py
--- a/chirp/drivers/th350.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th350.py	Sat Jun 06 02:06:40 2020 +0800
@@ -18,7 +18,7 @@
 import logging
 from math import floor
 from chirp import chirp_common, directory, bitwise, memmap, errors, util
-from uvb5 import BaofengUVB5
+from chirp.drivers.uvb5 import BaofengUVB5
 
 LOG = logging.getLogger(__name__)
 
@@ -303,7 +303,7 @@
             self._mmap = do_download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -312,7 +312,7 @@
             do_upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
diff -r c26b3ea688ee chirp/drivers/th7800.py
--- a/chirp/drivers/th7800.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th7800.py	Sat Jun 06 02:06:40 2020 +0800
@@ -536,7 +536,7 @@
 
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -726,7 +726,7 @@
     def sync_in(self):
         try:
             self._mmap = _download(self)
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError(
                     "Failed to communicate with the radio: %s" % e)
         self.process_mmap()
@@ -734,6 +734,6 @@
     def sync_out(self):
         try:
             _upload(self)
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError(
                     "Failed to communicate with the radio: %s" % e)
diff -r c26b3ea688ee chirp/drivers/th9000.py
--- a/chirp/drivers/th9000.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th9000.py	Sat Jun 06 02:06:40 2020 +0800
@@ -352,7 +352,7 @@
     try:
         radio.pipe.write(data)
         radio.pipe.read(len(data))
-    except Exception, e:
+    except Exception as e:
         LOG.error("Error writing to radio: %s" % e)
         raise errors.RadioError("Unable to write to radio")
 
@@ -366,7 +366,7 @@
 def _read(radio, length):
     try:
         data = radio.pipe.read(length)
-    except Exception, e:
+    except Exception as e:
         LOG.error( "Error reading from radio: %s" % e)
         raise errors.RadioError("Unable to read from radio")
 
@@ -793,7 +793,7 @@
                     else:
                         LOG.debug( "Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug( element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/th9800.py
--- a/chirp/drivers/th9800.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th9800.py	Sat Jun 06 02:06:40 2020 +0800
@@ -598,7 +598,7 @@
 
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -785,7 +785,7 @@
     def sync_in(self):
         try:
             self._mmap = _download(self)
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError(
                     "Failed to communicate with the radio: %s" % e)
         self.process_mmap()
@@ -793,6 +793,6 @@
     def sync_out(self):
         try:
             _upload(self)
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError(
                     "Failed to communicate with the radio: %s" % e)
diff -r c26b3ea688ee chirp/drivers/th_uv3r25.py
--- a/chirp/drivers/th_uv3r25.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th_uv3r25.py	Sat Jun 06 02:06:40 2020 +0800
@@ -22,7 +22,7 @@
     RadioSettingValueInteger, RadioSettingValueList, \
     RadioSettingValueBoolean, RadioSettingValueString
 
-from th_uv3r import TYTUV3RRadio, tyt_uv3r_prep, THUV3R_CHARSET
+from chirp.drivers.th_uv3r import TYTUV3RRadio, tyt_uv3r_prep, THUV3R_CHARSET
 
 
 def tyt_uv3r_download(radio):
diff -r c26b3ea688ee chirp/drivers/th_uv8000.py
--- a/chirp/drivers/th_uv8000.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/th_uv8000.py	Sat Jun 06 02:06:40 2020 +0800
@@ -512,7 +512,7 @@
 
     # Special Channels Declaration
     # WARNING Indecis are hard wired in get/set_memory code !!!
-    # Channels print in + increasing index order (most negative first)
+    # Channels print(in + increasing index order (most negative first))
     SPECIAL_MEMORIES = {
        "UpVFO": -2,
        "LoVFO": -1
@@ -769,7 +769,7 @@
         mem.extd_number = number
         # Unused attributes are ignored in Set_memory
         if (mem.number == -1) or (mem.number == -2):
-            # Print Upper[1] first, and Lower[0] next
+            # print(Upper[1] first, and Lower[0] next)
             rx = 0
             if mem.number == -2:
                 rx = 1
@@ -1486,6 +1486,6 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
diff -r c26b3ea688ee chirp/drivers/thd72.py
--- a/chirp/drivers/thd72.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/thd72.py	Sat Jun 06 02:06:40 2020 +0800
@@ -581,7 +581,7 @@
                 except AttributeError as e:
                     LOG.error("Setting %s is not in the memory map: %s" %
                               (element.get_name(), e))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -738,9 +738,9 @@
         return r
 
     def usage():
-        print "Usage: %s <-i input.img>|<-o output.img> -p port " \
+        print("Usage: %s <-i input.img>|<-o output.img> -p port " \
             "[[-f first-addr] [-l last-addr] | [-b list,of,blocks]]" % \
-            sys.argv[0]
+            sys.argv[0])
         sys.exit(1)
 
     opts, args = getopt.getopt(sys.argv[1:], "i:o:p:f:l:b:")
@@ -793,4 +793,4 @@
     else:
         r._mmap = file(fname, "rb").read(r._memsize)
         r.upload(blocks)
-    print "\nDone"
+    print("\nDone")
diff -r c26b3ea688ee chirp/drivers/thuv1f.py
--- a/chirp/drivers/thuv1f.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/thuv1f.py	Sat Jun 06 02:06:40 2020 +0800
@@ -214,7 +214,7 @@
             self._mmap = uvf1_download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -223,7 +223,7 @@
             uvf1_upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     @classmethod
diff -r c26b3ea688ee chirp/drivers/tk270.py
--- a/chirp/drivers/tk270.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tk270.py	Sat Jun 06 02:06:40 2020 +0800
@@ -96,7 +96,7 @@
 
 MEM_SIZE = 0x400
 BLOCK_SIZE = 8
-MEM_BLOCKS = range(0, (MEM_SIZE / BLOCK_SIZE))
+MEM_BLOCKS = range(0, int(MEM_SIZE / BLOCK_SIZE))
 ACK_CMD = "\x06"
 TIMEOUT = 0.05  # from 0.03 up it' s safe, we set in 0.05 for a margin
 
@@ -426,7 +426,7 @@
             self._VARIANT += self._kind + ", %d - %d MHz" % (low, high)
 
             # DEBUG
-            #print self._VARIANT
+            #print(self._VARIANT)
 
         except KeyError:
             LOG.debug("Wrong Kenwood radio, ID or unknown variant")
@@ -487,7 +487,7 @@
         actual = self.get_active(chan)
         if actual != bool(value):
             # DEBUG
-            #print "VALUE %s fliping" % int(not value)
+            #print("VALUE %s fliping" % int(not value))
 
             # I have to flip the value
             rbyte = self._memobj.active[byte]
diff -r c26b3ea688ee chirp/drivers/tk760.py
--- a/chirp/drivers/tk760.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tk760.py	Sat Jun 06 02:06:40 2020 +0800
@@ -97,7 +97,7 @@
 
 MEM_SIZE = 0x400
 BLOCK_SIZE = 8
-MEM_BLOCKS = range(0, (MEM_SIZE / BLOCK_SIZE))
+MEM_BLOCKS = range(0, int(MEM_SIZE / BLOCK_SIZE))
 ACK_CMD = "\x06"
 # from 0.03 up it' s safe
 # I have to turn it up, some users reported problems with this, was 0.05
diff -r c26b3ea688ee chirp/drivers/tk760g.py
--- a/chirp/drivers/tk760g.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tk760g.py	Sat Jun 06 02:06:40 2020 +0800
@@ -263,13 +263,13 @@
 
 MEM_SIZE = 0x8000  # 32,768 bytes
 BLOCK_SIZE = 256
-BLOCKS = MEM_SIZE / BLOCK_SIZE
+BLOCKS = int(MEM_SIZE / BLOCK_SIZE)
 MEM_BLOCKS = range(0, BLOCKS)
 
 # define and empty block of data, as it will be used a lot in this code
 EMPTY_BLOCK = "\xFF" * 256
 
-RO_BLOCKS = range(0x10, 0x1F) + range(0x59, 0x5f)
+RO_BLOCKS = [*range(0x10, 0x1F), *range(0x59, 0x5f)]
 ACK_CMD = "\x06"
 
 POWER_LEVELS = [chirp_common.PowerLevel("Low", watts=1),
@@ -907,7 +907,7 @@
             do_upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
diff -r c26b3ea688ee chirp/drivers/tk8102.py
--- a/chirp/drivers/tk8102.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tk8102.py	Sat Jun 06 02:06:40 2020 +0800
@@ -188,7 +188,7 @@
         except errors.RadioError:
             self.pipe.write("\x45")
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to download from radio: %s" % e)
         self.process_mmap()
 
@@ -201,7 +201,7 @@
         except errors.RadioError:
             self.pipe.write("\x45")
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to upload to radio: %s" % e)
 
     def get_raw_memory(self, number):
diff -r c26b3ea688ee chirp/drivers/tmv71_ll.py
--- a/chirp/drivers/tmv71_ll.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/tmv71_ll.py	Sat Jun 06 02:06:40 2020 +0800
@@ -386,6 +386,6 @@
     s = serial.Serial(port=sys.argv[1], baudrate=9600, dsrdtr=True,
                       timeout=0.25)
     # s.write("\r\r")
-    # print get_id(s)
+    # print(get_id(s))
     data = download(s)
     file(sys.argv[2], "wb").write(data)
diff -r c26b3ea688ee chirp/drivers/ts2000.py
--- a/chirp/drivers/ts2000.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ts2000.py	Sat Jun 06 02:06:40 2020 +0800
@@ -217,7 +217,7 @@
             duplex = 0
             offset = 0
         else:
-            print "Bug: unsupported duplex `%s'" % mem.duplex
+            print("Bug: unsupported duplex `%s'" % mem.duplex)
         if mem.mode in ["AM", "FM"]:
             step = TS2000_FM_STEPS.index(mem.tuning_step)
         else:
@@ -259,7 +259,7 @@
         elif mem.duplex == "split":
             duplex = 0
         else:
-            print "Bug: unsupported duplex `%s'" % mem.duplex
+            print("Bug: unsupported duplex `%s'" % mem.duplex)
         if mem.mode in ["AM", "FM"]:
             step = TS2000_FM_STEPS.index(mem.tuning_step)
         else:
diff -r c26b3ea688ee chirp/drivers/ts480.py
--- a/chirp/drivers/ts480.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ts480.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1138,7 +1138,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
         return
diff -r c26b3ea688ee chirp/drivers/ts590.py
--- a/chirp/drivers/ts590.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ts590.py	Sat Jun 06 02:06:40 2020 +0800
@@ -628,7 +628,7 @@
 
     # Special Channels Declaration
     # WARNING Indecis are hard wired in get/set_memory code !!!
-    # Channels print in + increasing index order
+    # Channels print(in + increasing index order)
     SPECIAL_MEMORIES = {"EXT 0": 110,
                         "EXT 1": 111,
                         "EXT 2": 112,
@@ -1644,7 +1644,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/ts850.py
--- a/chirp/drivers/ts850.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/ts850.py	Sat Jun 06 02:06:40 2020 +0800
@@ -37,7 +37,7 @@
     "CW-R":  "7",
     "FSK-R": "9",
 }
-TS850_MODES_REV = {val: mode for mode, val in TS850_MODES.iteritems()}
+TS850_MODES_REV = {val: mode for mode, val in TS850_MODES.items()}
 
 TS850_TONES = list(chirp_common.OLD_TONES)
 TS850_TONES.remove(69.3)
diff -r c26b3ea688ee chirp/drivers/uv5r.py
--- a/chirp/drivers/uv5r.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/uv5r.py	Sat Jun 06 02:06:40 2020 +0800
@@ -514,7 +514,7 @@
         try:
             data = _do_ident(radio, magic)
             return data
-        except errors.RadioError, e:
+        except errors.RadioError as e:
             LOG.error("uv5r._ident_radio: %s", e)
             error = e
             time.sleep(2)
@@ -809,7 +809,7 @@
             self._mmap = _do_download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -818,7 +818,7 @@
             _do_upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def get_raw_memory(self, number):
@@ -1707,7 +1707,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -1721,7 +1721,7 @@
                     value = int(val.get_value() * 10)
                 LOG.debug("Setting fm_presets = %s" % (value))
                 self._memobj.fm_presets = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/uvb5.py
--- a/chirp/drivers/uvb5.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/uvb5.py	Sat Jun 06 02:06:40 2020 +0800
@@ -328,7 +328,7 @@
             self._mmap = do_download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
         self.process_mmap()
 
@@ -337,7 +337,7 @@
             do_upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def process_mmap(self):
@@ -770,7 +770,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -786,7 +786,7 @@
                 LOG.debug("Setting fm_presets[%1i] = %s" % (index, value))
                 setting = self._memobj.fm_presets
                 setting[index] = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/vgc.py
--- a/chirp/drivers/vgc.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vgc.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1410,7 +1410,7 @@
                     elif element.value.get_mutable():
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
diff -r c26b3ea688ee chirp/drivers/vx2.py
--- a/chirp/drivers/vx2.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vx2.py	Sat Jun 06 02:06:40 2020 +0800
@@ -746,6 +746,6 @@
                     newval = self._encode_chars(newval, 6)
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/vx3.py
--- a/chirp/drivers/vx3.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vx3.py	Sat Jun 06 02:06:40 2020 +0800
@@ -973,6 +973,6 @@
                     newval = self._encode_chars(newval, 6)
                 LOG.debug("Setting %s(%s) <= %s" % (setting, oldval, newval))
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
diff -r c26b3ea688ee chirp/drivers/vx6.py
--- a/chirp/drivers/vx6.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vx6.py	Sat Jun 06 02:06:40 2020 +0800
@@ -871,5 +871,5 @@
                 elif setting == "password":
                     newval = self._encode_chars(newval, 4)
                 setattr(_settings, setting, newval)
-            except Exception, e:
+            except Exception as e:
                 raise
diff -r c26b3ea688ee chirp/drivers/vx8.py
--- a/chirp/drivers/vx8.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vx8.py	Sat Jun 06 02:06:40 2020 +0800
@@ -1439,7 +1439,7 @@
                 except AttributeError as e:
                     LOG.error("Setting %s is not in the memory map: %s" %
                               (element.get_name(), e))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/vxa700.py
--- a/chirp/drivers/vxa700.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/vxa700.py	Sat Jun 06 02:06:40 2020 +0800
@@ -177,7 +177,7 @@
             self._mmap = _download(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate " +
                                     "with the radio: %s" % e)
         self.process_mmap()
@@ -192,7 +192,7 @@
             _upload(self)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate " +
                                     "with the radio: %s" % e)
 
diff -r c26b3ea688ee chirp/drivers/wouxun.py
--- a/chirp/drivers/wouxun.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/wouxun.py	Sat Jun 06 02:06:40 2020 +0800
@@ -23,7 +23,7 @@
                 RadioSettingValueBoolean, RadioSettingValueList, \
                 RadioSettingValueInteger, RadioSettingValueString, \
                 RadioSettingValueFloat, RadioSettings
-from wouxun_common import wipe_memory, do_download, do_upload
+from chirp.drivers.wouxun_common import wipe_memory, do_download, do_upload
 from textwrap import dedent
 
 LOG = logging.getLogger(__name__)
@@ -274,7 +274,7 @@
             return do_download(self, 0x0000, 0x2000, 0x0040)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def _upload(self):
@@ -285,7 +285,7 @@
             return do_upload(self, 0x0000, 0x2000, 0x0010)
         except errors.RadioError:
             raise
-        except Exception, e:
+        except Exception as e:
             raise errors.RadioError("Failed to communicate with radio: %s" % e)
 
     def sync_in(self):
@@ -658,7 +658,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -680,7 +680,7 @@
                 else:
                     setting = self._memobj.fm_presets_1
                 setting[index] = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -690,7 +690,7 @@
                 setattr(self._memobj.freq_ranges,
                         element.get_name(),
                         encode_freq(int(element.value)))
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
@@ -1397,7 +1397,7 @@
                     else:
                         LOG.debug("Setting %s = %s" % (setting, element.value))
                         setattr(obj, setting, element.value)
-                except Exception, e:
+                except Exception as e:
                     LOG.debug(element.get_name())
                     raise
 
@@ -1419,7 +1419,7 @@
                 else:
                     setting = self._memobj.fm_presets_1
                 setting[index] = value
-            except Exception, e:
+            except Exception as e:
                 LOG.debug(element.get_name())
                 raise
 
diff -r c26b3ea688ee chirp/drivers/yaesu_clone.py
--- a/chirp/drivers/yaesu_clone.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/drivers/yaesu_clone.py	Sat Jun 06 02:06:40 2020 +0800
@@ -106,7 +106,7 @@
 def _clone_in(radio):
     try:
         return __clone_in(radio)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
 
@@ -166,7 +166,7 @@
 def _clone_out(radio):
     try:
         return __clone_out(radio)
-    except Exception, e:
+    except Exception as e:
         raise errors.RadioError("Failed to communicate with the radio: %s" % e)
 
 
diff -r c26b3ea688ee chirp/elib_intl.py
--- a/chirp/elib_intl.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/elib_intl.py	Sat Jun 06 02:06:40 2020 +0800
@@ -485,7 +485,7 @@
 
         import elib.intl
         elib.intl.install('myapplication', '/path/to/usr/share/locale')
-        print _('This string will be translated.')
+        print(_('This string will be translated.'))
 
     Note that this is only one way, albeit the most convenient way,
     to make the _() function available to your application. Because it affects
@@ -511,7 +511,7 @@
 
         import elib.intl
         _ = elib.intl.install_module('mymodule', '/path/to/usr/share/locale')
-        print _('This string will be translated.')
+        print(_('This string will be translated.'))
 
     When writing packages, you can usually do this in the package's __init__.py
     file and import the _() function from the package namespace as needed.
diff -r c26b3ea688ee chirp/logger.py
--- a/chirp/logger.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/logger.py	Sat Jun 06 02:06:40 2020 +0800
@@ -31,20 +31,20 @@
 
 def version_string():
     args = (CHIRP_VERSION,
-            platform.get_platform().os_version_string(),
+            platform.platform(),
             sys.version.split()[0])
     return "CHIRP %s on %s (Python %s)" % args
 
 
 class VersionAction(argparse.Action):
     def __call__(self, parser, namespace, value, option_string=None):
-        print version_string()
+        print(version_string())
         sys.exit(1)
 
 
 def add_version_argument(parser):
     parser.add_argument("--version", action=VersionAction, nargs=0,
-                        help="Print version and exit")
+                        help="print version and exit")
 
 #: Map human-readable logging levels to their internal values.
 log_level_names = {"critical": logging.CRITICAL,
diff -r c26b3ea688ee chirp/platform.py
--- a/chirp/platform.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/platform.py	Sat Jun 06 02:06:40 2020 +0800
@@ -45,7 +45,7 @@
             ports.append((portname, "Unknown", "Serial"))
             win32file.CloseHandle(port)
             port = None
-        except Exception, e:
+        except Exception as e:
             pass
 
     return ports
@@ -374,7 +374,7 @@
     def list_serial_ports(self):
         try:
             ports = list(comports())
-        except Exception, e:
+        except Exception as e:
             if comports != win32_comports_bruteforce:
                 LOG.error("Failed to detect win32 serial ports: %s" % e)
                 ports = win32_comports_bruteforce()
@@ -391,7 +391,7 @@
 
         try:
             fname, _, _ = win32gui.GetOpenFileNameW(Filter=typestrs)
-        except Exception, e:
+        except Exception as e:
             LOG.error("Failed to get filename: %s" % e)
             return None
 
@@ -422,7 +422,7 @@
                                                     CustomFilter=custom,
                                                     DefExt=def_ext,
                                                     Filter=typestrs)
-        except Exception, e:
+        except Exception as e:
             LOG.error("Failed to get filename: %s" % e)
             return None
 
@@ -434,7 +434,7 @@
         try:
             pidl, _, _ = shell.SHBrowseForFolder()
             fname = shell.SHGetPathFromIDList(pidl)
-        except Exception, e:
+        except Exception as e:
             LOG.error("Failed to get directory: %s" % e)
             return None
 
@@ -476,16 +476,16 @@
 def _do_test():
     __pform = get_platform()
 
-    print "Config dir: %s" % __pform.config_dir()
-    print "Default dir: %s" % __pform.default_dir()
-    print "Log file (foo): %s" % __pform.log_file("foo")
-    print "Serial ports: %s" % __pform.list_serial_ports()
-    print "OS Version: %s" % __pform.os_version_string()
+    print("Config dir: %s" % __pform.config_dir())
+    print("Default dir: %s" % __pform.default_dir())
+    print("Log file (foo): %s" % __pform.log_file("foo"))
+    print("Serial ports: %s" % __pform.list_serial_ports())
+    print("OS Version: %s" % __pform.os_version_string())
     # __pform.open_text_file("d-rats.py")
 
-    # print "Open file: %s" % __pform.gui_open_file()
-    # print "Save file: %s" % __pform.gui_save_file(default_name="Foo.txt")
-    print "Open folder: %s" % __pform.gui_select_dir("/tmp")
+    # print("Open file: %s" % __pform.gui_open_file())
+    # print("Save file: %s" % __pform.gui_save_file(default_name="Foo.txt"))
+    print("Open folder: %s" % __pform.gui_select_dir("/tmp"))
 
 if __name__ == "__main__":
     _do_test()
diff -r c26b3ea688ee chirp/pyPEG.py
--- a/chirp/pyPEG.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/pyPEG.py	Sat Jun 06 02:06:40 2020 +0800
@@ -5,14 +5,13 @@
 import re
 import sys
 import codecs
-import exceptions
 
 
-class keyword(unicode):
+class keyword(str):
     pass
 
 
-class code(unicode):
+class code(str):
     pass
 
 
@@ -30,7 +29,7 @@
     pass
 
 
-class Name(unicode):
+class Name(str):
     def __init__(self, *args):
         self.line = 0
         self.file = u""
@@ -46,14 +45,14 @@
     def __call__(self):
         return self.what
 
-    def __unicode__(self):
+    def __str__(self):
         return u'Symbol(' + repr(self.__name__) + ', ' + repr(self.what) + u')'
 
     def __repr__(self):
-        return unicode(self)
+        return str(self)
 
-word_regex = re.compile(ur"\w+")
-rest_regex = re.compile(ur".*")
+word_regex = re.compile(r"\w+")
+rest_regex = re.compile(r".*")
 
 print_trace = False
 
@@ -61,14 +60,14 @@
 def u(text):
     if isinstance(text, exceptions.BaseException):
         text = text.args[0]
-    if type(text) is unicode:
+    if type(text) is str:
         return text
     if isinstance(text, str):
         if sys.stdin.encoding:
             return codecs.decode(text, sys.stdin.encoding)
         else:
             return codecs.decode(text, "utf-8")
-    return unicode(text)
+    return str(text)
 
 
 def skip(skipper, text, skipWS, skipComments):
@@ -188,7 +187,7 @@
 
         pattern_type = type(pattern)
 
-        if pattern_type is str or pattern_type is unicode:
+        if pattern_type is str or pattern_type is str:
             if text[:len(pattern)] == pattern:
                 text = skip(self.skipper, text[len(pattern):],
                             skipWS, skipComments)
@@ -377,7 +376,7 @@
         if text:
             raise SyntaxError()
 
-    except SyntaxError, msg:
+    except SyntaxError as msg:
         parsed = textlen - p.restlen
         textlen = 0
         nn, lineNo, file = 0, 0, u""
diff -r c26b3ea688ee chirp/radioreference.py
--- a/chirp/radioreference.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/radioreference.py	Sat Jun 06 02:06:40 2020 +0800
@@ -72,7 +72,7 @@
             service = self._client.service
             zipcode = service.getZipcodeInfo(self._zip, self._auth)
             county = service.getCountyInfo(zipcode.ctid, self._auth)
-        except WebFault, err:
+        except WebFault as err:
             raise errors.RadioError(err)
 
         status = chirp_common.Status()
@@ -185,8 +185,8 @@
                    username=sys.argv[2],
                    password=sys.argv[3])
     rrr.do_fetch()
-    print rrr.get_raw_memory(0)
-    print rrr.get_memory(0)
+    print(rrr.get_raw_memory(0))
+    print(rrr.get_memory(0))
 
 if __name__ == "__main__":
     main()
diff -r c26b3ea688ee chirp/ui/clone.py
--- a/chirp/ui/clone.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/clone.py	Sat Jun 06 02:06:40 2020 +0800
@@ -177,7 +177,7 @@
                     raise Exception(
                         _("Unable to detect radio on {port}").format(
                             port=cs.port))
-            except Exception, e:
+            except Exception as e:
                 d = inputdialog.ExceptionDialog(e)
                 d.run()
                 d.destroy()
@@ -256,7 +256,7 @@
                 self.__radio.sync_in()
 
             emsg = None
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             LOG.error(_("Clone failed: {error}").format(error=e))
             emsg = e
@@ -275,4 +275,4 @@
 if __name__ == "__main__":
     d = CloneSettingsDialog("/dev/ttyUSB0")
     r = d.run()
-    print r
+    print(r)
diff -r c26b3ea688ee chirp/ui/common.py
--- a/chirp/ui/common.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/common.py	Sat Jun 06 02:06:40 2020 +0800
@@ -114,9 +114,9 @@
                                         str(self.kwargs)))
             DBG(self.desc)
             result = func(*self.args, **self.kwargs)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             result = e
-        except Exception, e:
+        except Exception as e:
             LOG.error("Exception running RadioJob: %s" % e)
             log_exception()
             LOG.error("Job Args:   %s" % str(self.args))
@@ -134,7 +134,7 @@
 
         try:
             func = getattr(self.target, self.func)
-        except AttributeError, e:
+        except AttributeError as e:
             LOG.error("No such radio function `%s' in %s" %
                       (self.func, self.target))
             return
diff -r c26b3ea688ee chirp/ui/config.py
--- a/chirp/ui/config.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/config.py	Sat Jun 06 02:06:40 2020 +0800
@@ -14,7 +14,7 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 from chirp import platform
-from ConfigParser import ConfigParser
+from configparser import ConfigParser
 import os
 
 
diff -r c26b3ea688ee chirp/ui/editorset.py
--- a/chirp/ui/editorset.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/editorset.py	Sat Jun 06 02:06:40 2020 +0800
@@ -296,7 +296,7 @@
             common.show_error("Memory editor must be selected before import")
         try:
             src_radio = directory.get_radio_by_image(filen)
-        except Exception, e:
+        except Exception as e:
             common.show_error(e)
             return
 
@@ -310,7 +310,7 @@
             try:
                 src_radio.status_fn = status
                 src_radio.do_fetch()
-            except Exception, e:
+            except Exception as e:
                 common.show_error(e)
                 ww.hide()
                 return
@@ -319,7 +319,7 @@
         try:
             if src_radio.get_features().has_sub_devices:
                 src_radio = self.choose_sub_device(src_radio)
-        except Exception, e:
+        except Exception as e:
             common.show_error(e)
             return
 
@@ -335,7 +335,7 @@
                                            src_radio,
                                            self.rthread)
             reporting.report_model_usage(src_radio, "importsrc", True)
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error(_("There was an error during "
                                 "import: {error}").format(error=e))
@@ -348,7 +348,7 @@
                 dst_radio = generic_xml.XMLRadio(filen)
             else:
                 raise Exception(_("Unsupported file type"))
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error(e)
             return
@@ -361,7 +361,7 @@
             count = self._do_import_locked(importdialog.ExportDialog,
                                            self.rthread.radio,
                                            dst_rthread)
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error(_("There was an error during "
                                 "export: {error}").format(error=e),
@@ -376,7 +376,7 @@
 
         try:
             dst_radio.save(filename=filen)
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error(_("There was an error during "
                                 "export: {error}").format(error=e),
diff -r c26b3ea688ee chirp/ui/fips.py
--- a/chirp/ui/fips.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/fips.py	Sat Jun 06 02:06:40 2020 +0800
@@ -6590,7 +6590,7 @@
 
 if __name__ == "__main__":
     from sys import argv
-    from pprint import PrettyPrinter
+    from pprint(import PrettyPrinter)
     pp = PrettyPrinter(indent=2)
 
     import csv
diff -r c26b3ea688ee chirp/ui/importdialog.py
--- a/chirp/ui/importdialog.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/importdialog.py	Sat Jun 06 02:06:40 2020 +0800
@@ -265,7 +265,7 @@
                                               {"number":  new,
                                                "name":    name,
                                                "comment": comm})
-            except import_logic.ImportError, e:
+            except import_logic.ImportError as e:
                 LOG.error("Import error: %s", e)
                 error_messages[new] = str(e)
                 continue
@@ -518,7 +518,7 @@
         except errors.InvalidMemoryLocation:
             LOG.error("Location %i empty or at limit of destination radio" %
                       number)
-        except errors.InvalidDataError, e:
+        except errors.InvalidDataError as e:
             LOG.error("Got error from radio, assuming %i beyond limits: %s" %
                       (number, e))
 
@@ -529,9 +529,9 @@
                 self.ww.set(float(i) / end)
             try:
                 mem = self.src_radio.get_memory(i)
-            except errors.InvalidMemoryLocation, e:
+            except errors.InvalidMemoryLocation as e:
                 continue
-            except Exception, e:
+            except Exception as e:
                 self.__store.append(row=(False,
                                          i,
                                          i,
@@ -651,4 +651,4 @@
     d = ImportDialog(radio)
     d.run()
 
-    print d.get_import_list()
+    print(d.get_import_list())
diff -r c26b3ea688ee chirp/ui/mainapp.py
--- a/chirp/ui/mainapp.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/mainapp.py	Sat Jun 06 02:06:40 2020 +0800
@@ -45,7 +45,7 @@
 
 try:
     import serial
-except ImportError, e:
+except ImportError as e:
     common.log_exception()
     common.show_error("\nThe Pyserial module is not installed!")
 
@@ -374,7 +374,7 @@
                 if not radio:
                     return
                 LOG.debug("Manually selected %s" % radio)
-            except Exception, e:
+            except Exception as e:
                 common.log_exception()
                 common.show_error(os.path.basename(fname) + ": " + str(e))
                 return
@@ -384,7 +384,7 @@
             eset = editorset.EditorSet(radio, self,
                                        filename=fname,
                                        tempname=tempname)
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error(
                 _("There was an error opening {fname}: {error}").format(
@@ -491,7 +491,7 @@
 
         try:
             eset.save(fname)
-        except Exception, e:
+        except Exception as e:
             d = inputdialog.ExceptionDialog(e)
             d.run()
             d.destroy()
@@ -574,7 +574,7 @@
             try:
                 shutil.copy(fn, stock_dir)
                 LOG.debug("Copying %s -> %s" % (fn, stock_dir))
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Unable to copy %s to %s: %s" % (fn, stock_dir, e))
                 return False
         return True
@@ -584,7 +584,7 @@
         if not os.path.isdir(stock_dir):
             try:
                 os.mkdir(stock_dir)
-            except Exception, e:
+            except Exception as e:
                 LOG.error("Unable to create directory: %s" % stock_dir)
                 return
         if not self.copy_shipped_stock_configs(stock_dir):
@@ -730,7 +730,7 @@
                                 rtscts=rclass.HARDWARE_FLOW,
                                 timeout=0.25)
             ser.flushInput()
-        except serial.SerialException, e:
+        except serial.SerialException as e:
             d = inputdialog.ExceptionDialog(e)
             d.run()
             d.destroy()
@@ -776,7 +776,7 @@
                                 rtscts=radio.HARDWARE_FLOW,
                                 timeout=0.25)
             ser.flushInput()
-        except serial.SerialException, e:
+        except serial.SerialException as e:
             d = inputdialog.ExceptionDialog(e)
             d.run()
             d.destroy()
@@ -910,7 +910,7 @@
                 radio = dmrmarc.DMRMARCRadio(None)
                 radio.set_params(city, state, country)
                 self.do_open_live(radio, read_only=True)
-            except errors.RadioError, e:
+            except errors.RadioError as e:
                 common.show_error(e)
 
         self.window.set_cursor(None)
@@ -1021,7 +1021,7 @@
         query = query % (code,
                          band and band or "%%",
                          county and county or "%%")
-        print query
+        print(query)
 
         # Do this in case the import process is going to take a while
         # to make sure we process events leading up to this
@@ -1045,11 +1045,11 @@
                                             ("query=%s\n" % query) +
                                             ("\n") +
                                             ("\n".join(radio.errors)))
-        except errors.InvalidDataError, e:
+        except errors.InvalidDataError as e:
             common.show_error(str(e))
             self.window.set_cursor(None)
             return
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
 
         reporting.report_model_usage(radio, "import", True)
@@ -1127,7 +1127,7 @@
 
         query = "http://chirp.danplanet.com/query/rb/1.0/app_direct" \
                 "?loc=%s&band=%s&dist=%s" % (loc, band, dist)
-        print query
+        print(query)
 
         # Do this in case the import process is going to take a while
         # to make sure we process events leading up to this
@@ -1151,11 +1151,11 @@
                                             ("query=%s\n" % query) +
                                             ("\n") +
                                             ("\n".join(radio.errors)))
-        except errors.InvalidDataError, e:
+        except errors.InvalidDataError as e:
             common.show_error(str(e))
             self.window.set_cursor(None)
             return
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
 
         reporting.report_model_usage(radio, "import", True)
@@ -1239,7 +1239,7 @@
 
         try:
             radio = PRRadio(filename)
-        except Exception, e:
+        except Exception as e:
             common.show_error(str(e))
             return
 
@@ -1378,7 +1378,7 @@
                 radio = radioreference.RadioReferenceRadio(None)
                 radio.set_params(zipcode, username, passwd)
                 self.do_open_live(radio, read_only=True)
-            except errors.RadioError, e:
+            except errors.RadioError as e:
                 common.show_error(e)
 
         self.window.set_cursor(None)
@@ -1620,7 +1620,7 @@
             # See this for why:
             # http://stackoverflow.com/questions/2904274/globals-and-locals-in-python-exec
             exec(pyc, globals(), globals())
-        except Exception, e:
+        except Exception as e:
             common.log_exception()
             common.show_error("Unable to load module: %s" % e)
 
diff -r c26b3ea688ee chirp/ui/memdetail.py
--- a/chirp/ui/memdetail.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/memdetail.py	Sat Jun 06 02:06:40 2020 +0800
@@ -61,24 +61,24 @@
 
         try:
             newval = self._get_value()
-        except ValueError, e:
+        except ValueError as e:
             self._errfn(self._name, str(e))
             return str(e)
 
         if self._name.startswith("extra_"):
             try:
                 self._memory.extra[self._name.split("_", 1)[1]].value = newval
-            except settings.InternalError, e:
+            except settings.InternalError as e:
                 self._errfn(self._name, str(e))
                 return str(e)
         else:
             try:
                 setattr(self._memory, self._name, newval)
-            except chirp_common.ImmutableValueError, e:
+            except chirp_common.ImmutableValueError as e:
                 if getattr(self._memory, self._name) != self._get_value():
                     self._errfn(self._name, str(e))
                     return str(e)
-            except ValueError, e:
+            except ValueError as e:
                 self._errfn(self._name, str(e))
                 return str(e)
 
diff -r c26b3ea688ee chirp/ui/memedit.py
--- a/chirp/ui/memedit.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/memedit.py	Sat Jun 06 02:06:40 2020 +0800
@@ -178,7 +178,7 @@
 
         try:
             new = chirp_common.parse_freq(new)
-        except ValueError, e:
+        except ValueError as e:
             LOG.error("chirp_common.parse_freq error: %s", e)
             new = None
 
@@ -939,7 +939,7 @@
 
     def cell_editing_stopped(self, *args):
         self._in_editing = False
-        print 'Would activate %s' % str(self._edit_path)
+        print('Would activate %s' % str(self._edit_path))
         self.view.grab_focus()
         self.view.set_cursor(*self._edit_path)
 
@@ -972,7 +972,7 @@
                 for i in col_order:
                     if i not in default_col_order:
                         raise Exception()
-        except Exception, e:
+        except Exception as e:
             LOG.error("column order setting: %s", e)
             col_order = default_col_order
 
diff -r c26b3ea688ee chirp/ui/miscwidgets.py
--- a/chirp/ui/miscwidgets.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/miscwidgets.py	Sat Jun 06 02:06:40 2020 +0800
@@ -130,7 +130,7 @@
         try:
             (store, iter) = self.__view.get_selection().get_selected()
             return store.get(iter, 0)[0]
-        except Exception, e:
+        except Exception as e:
             LOG.error("Unable to find selected: %s" % e)
             return None
 
@@ -300,7 +300,7 @@
         try:
             (lst, iter) = self._view.get_selection().get_selected()
             lst.remove(iter)
-        except Exception, e:
+        except Exception as e:
             LOG.error("Unable to remove selected: %s" % e)
 
     def get_selected(self, take_default=False):
@@ -322,7 +322,7 @@
                 target = lst.get_iter(pos-1)
             elif delta < 0:
                 target = lst.get_iter(pos+1)
-        except Exception, e:
+        except Exception as e:
             return False
 
         if target:
@@ -588,7 +588,7 @@
             except:
                 try:
                     return self.parse_dms(string)
-                except Exception, e:
+                except Exception as e:
                     LOG.error("DMS: %s" % e)
 
         raise Exception("Invalid format")
@@ -737,9 +737,9 @@
 
     def print_val(entry):
         if entry.validate():
-            print "Valid: %s" % entry.value()
+            print("Valid: %s" % entry.value())
         else:
-            print "Invalid"
+            print("Invalid")
     lle.connect("activate", print_val)
 
     lle.set_text("45 13 12")
@@ -749,7 +749,7 @@
     except KeyboardInterrupt:
         pass
 
-    print lst.get_values()
+    print(lst.get_values())
 
 
 if __name__ == "__main__":
diff -r c26b3ea688ee chirp/ui/reporting.py
--- a/chirp/ui/reporting.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/reporting.py	Sat Jun 06 02:06:40 2020 +0800
@@ -132,7 +132,7 @@
     def _run(self):
         try:
             return self.__func(*self.__args)
-        except Exception, e:
+        except Exception as e:
             LOG.debug("Failed to report: %s" % e)
             return False
 
diff -r c26b3ea688ee chirp/ui/settingsedit.py
--- a/chirp/ui/settingsedit.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/settingsedit.py	Sat Jun 06 02:06:40 2020 +0800
@@ -109,7 +109,7 @@
     def _save_setting(self, widget, value):
         try:
             self._do_save_setting(widget, value)
-        except settings.InvalidValueError, e:
+        except settings.InvalidValueError as e:
             common.show_error(_("Invalid setting value: %s") % e)
 
     def _build_ui_tab(self, group):
diff -r c26b3ea688ee chirp/ui/shiftdialog.py
--- a/chirp/ui/shiftdialog.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirp/ui/shiftdialog.py	Sat Jun 06 02:06:40 2020 +0800
@@ -136,7 +136,7 @@
 
         try:
             count = func(newhole, *args)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             self.status(str(e), 0)
             self.finished()
             return
diff -r c26b3ea688ee chirpc
--- a/chirpc	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirpc	Sat Jun 06 02:06:40 2020 +0800
@@ -192,21 +192,21 @@
     logger.handle_options(options)
 
     if options.list_radios:
-        print "Supported Radios:\n\t", "\n\t".join(sorted(RADIOS.keys()))
+        print("Supported Radios:\n\t", "\n\t".join(sorted(RADIOS.keys())))
         sys.exit(0)
 
     if options.id:
         from chirp import icf
         s = serial.Serial(port=options.serial, baudrate=9600, timeout=0.5)
         md = icf.get_model_data(s)
-        print "Model:\n%s" % util.hexprint(md)
+        print("Model:\n%s" % util.hexprint(md))
         sys.exit(0)
 
     if not options.radio:
         if options.mmap:
             rclass = directory.get_radio_by_image(options.mmap).__class__
         else:
-            print "You must specify a radio model.  See --list-radios."
+            print("You must specify a radio model.  See --list-radios.")
             sys.exit(1)
     else:
         rclass = directory.get_radio(options.radio)
@@ -228,7 +228,7 @@
     radio = rclass(s)
 
     if options.list_settings:
-        print radio.get_settings()
+        print(radio.get_settings())
         sys.exit(0)
 
     if options.list_mem:
@@ -238,7 +238,7 @@
             mem = radio.get_memory(i)
             if mem.empty and not logger.is_visible(logging.INFO):
                 continue
-            print mem
+            print(mem)
         sys.exit(0)
 
     if options.list_special_mem:
@@ -247,7 +247,7 @@
             mem = radio.get_memory(i)
             if mem.empty and not logger.is_visible(logging.INFO):
                 continue
-            print mem
+            print(mem)
         sys.exit(0)
 
     if options.copy_mem:
@@ -255,7 +255,7 @@
         dst = parse_memory_number(radio, args[1:])
         try:
             mem = radio.get_memory(src)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             LOG.exception(e)
             sys.exit(1)
         LOG.info("copying memory %s to %s", src, dst)
@@ -266,7 +266,7 @@
         memnum = parse_memory_number(radio, args)
         try:
             mem = radio.get_memory(memnum)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             LOG.exception(e)
             sys.exit(1)
         if mem.empty:
@@ -279,10 +279,10 @@
         data = radio.get_raw_memory(memnum)
         for i in data:
             if ord(i) > 0x7F:
-                print "Memory location %s (%i):\n%s" % \
-                      (memnum, len(data), util.hexprint(data))
+                print("Memory location %s (%i):\n%s" % \
+                      memnum, len(data), util.hexprint(data))
                 sys.exit(0)
-        print data
+        print(data)
         sys.exit(0)
 
     if options.set_mem_dup is not None:
@@ -318,7 +318,7 @@
         memnum = parse_memory_number(radio, args)
         try:
             mem = radio.get_memory(memnum)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             LOG.exception(e)
             sys.exit(1)
 
@@ -359,11 +359,11 @@
         pos = parse_memory_number(radio, args)
         try:
             mem = radio.get_memory(pos)
-        except errors.InvalidMemoryLocation, e:
+        except errors.InvalidMemoryLocation as e:
             mem = chirp_common.Memory()
             mem.number = pos
 
-        print mem
+        print(mem)
         sys.exit(0)
 
     if options.download_mmap:
@@ -376,7 +376,7 @@
         try:
             radio.sync_in()
             radio.save_mmap(options.mmap)
-        except Exception, e:
+        except Exception as e:
             LOG.exception(e)
         sys.exit(1)
 
@@ -390,8 +390,8 @@
         try:
             radio.load_mmap(options.mmap)
             radio.sync_out()
-            print "Upload successful"
-        except Exception, e:
+            print("Upload successful")
+        except Exception as e:
             LOG.exception(e)
         sys.exit(1)
 
diff -r c26b3ea688ee chirpw
--- a/chirpw	Tue Jun 02 09:10:39 2020 -0700
+++ b/chirpw	Sat Jun 06 02:06:40 2020 +0800
@@ -36,7 +36,7 @@
 LOG = logging.getLogger("chirpw")
 
 
-urllib.URLopener.version = chirp_common.http_user_agent()
+#urllib.request.URLopener.version = chirp_common.http_user_agent()
 
 localepath = platform.get_platform().find_resource("locale")
 
diff -r c26b3ea688ee locale/check_parameters.py
--- a/locale/check_parameters.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/locale/check_parameters.py	Sat Jun 06 02:06:40 2020 +0800
@@ -10,7 +10,7 @@
 formatter = Formatter()
 
 for name, po in pos.iteritems():
-    print "Testing", name
+    print("Testing", name)
     for entry in po:
         if len(entry.msgstr) > 0:
             try:
@@ -21,11 +21,11 @@
                         for literal_text, field_name, format_spec, conversion
                         in formatter.parse(entry.msgstr)]
             except Exception as e:
-                print "Got exception!", e, "for entry", entry.msgid
+                print("Got exception!", e, "for entry", entry.msgid)
             else:
                 if tids is not None:
                     missing = [name for name in tids
                                if name is not None and name not in ids]
                     if len(missing) > 0:
-                        print "Missing parameters", missing, \
+                        print("Missing parameters", missing, \)
                               "in translation of", entry.msgid
diff -r c26b3ea688ee rpttool
--- a/rpttool	Tue Jun 02 09:10:39 2020 -0700
+++ b/rpttool	Sat Jun 06 02:06:40 2020 +0800
@@ -28,8 +28,8 @@
         s = serial.Serial(port="/dev/icom",
                           baudrate=idrp.IDRPx000V.BAUD_RATE,
                           timeout=0.1)
-    except Exception, e:
-        print "Unable to open serial port %s: %s" % ("/dev/icom", e)
+    except Exception as e:
+        print("Unable to open serial port %s: %s" % ("/dev/icom", e))
         return None
 
     rp = idrp.IDRPx000V(s)
@@ -44,8 +44,8 @@
 
     try:
         mem = rp.get_memory(0)
-    except Exception, e:
-        print "Unable to read memory from device: %s" % e
+    except Exception as e:
+        print("Unable to read memory from device: %s" % e)
         return 0
 
     rp.pipe.close()
@@ -56,31 +56,31 @@
 def _set_freq(rp):
     try:
         mem = rp.get_memory(0)
-    except Exception, e:
-        print "Unable to read memory from device: %s" % e
+    except Exception as e:
+        print("Unable to read memory from device: %s" % e)
         return False
 
-    print "\nNew frequency [%s]: " % chirp_common.format_freq(mem.freq),
+    print("\nNew frequency [%s]: " % chirp_common.format_freq(mem.freq),)
     input = sys.stdin.readline().strip()
 
     if not input:
-        print "Frequency unchanged"
+        print("Frequency unchanged")
         return False
 
     try:
         mem.freq = chirp_common.parse_freq(input)
     except Exception:
-        print "Invalid entry `%s'" % input
+        print("Invalid entry `%s'" % input)
         return False
 
     try:
         rp.set_memory(mem)
-    except Exception, e:
-        print "Failed to set frequency to %s: %s" % \
+    except Exception as e:
+        print("Failed to set frequency to %s: %s" % \)
             (chirp_common.format_freq(mem.freq), e)
         return False
 
-    print "Successfully set frequency to %s" % \
+    print("Successfully set frequency to %s" % \)
         chirp_common.format_freq(mem.freq)
     return True
 
@@ -92,8 +92,8 @@
 
     try:
         res = _set_freq(rp)
-    except Exception, e:
-        print "Unknown error while setting frequency: %s" % e
+    except Exception as e:
+        print("Unknown error while setting frequency: %s" % e)
         res = False
 
     rp.pipe.close()
@@ -101,16 +101,16 @@
 
 
 def main_menu():
-    print "Looking for a repeater...",
+    print("Looking for a repeater...",)
     sys.stdout.flush()
     freq = read_freq()
     if not freq:
         return 1
-    print "\r                                          \r",
+    print("\r                                          \r",)
 
     cmd = ""
     while cmd != "3":
-        print """
+        print(""")
 KK7DS ID-RP* Frequency Tool
 Current Setting: %s
 --------------------------------
@@ -128,7 +128,7 @@
         elif cmd == "2":
             freq = read_freq()
         elif cmd != "3":
-            print "Invalid entry"
+            print("Invalid entry")
 
     return 0
 
@@ -143,6 +143,6 @@
         sys.exit(r)
 
     if not os.geteuid() == 0:
-        print "Sorry, this must be run as root"
+        print("Sorry, this must be run as root")
         sys.exit(1)
     sys.exit(main_menu())
diff -r c26b3ea688ee setup.py
--- a/setup.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/setup.py	Sat Jun 06 02:06:40 2020 +0800
@@ -11,19 +11,19 @@
     import chirp
 
     with file("chirp/__init__.py", "w") as init:
-        print >>init, "CHIRP_VERSION = \"%s\"" % CHIRP_VERSION
-        print >>init, "__all__ = %s\n" % str(chirp.__all__)
+        print(>>init, "CHIRP_VERSION = \"%s\"" % CHIRP_VERSION)
+        print(>>init, "__all__ = %s\n" % str(chirp.__all__))
 
-    print "Set chirp/__init__.py::__all__ = %s" % str(chirp.__all__)
+    print("Set chirp/__init__.py::__all__ = %s" % str(chirp.__all__))
 
 
 def staticify_drivers_module():
     import chirp.drivers
 
     with file("chirp/drivers/__init__.py", "w") as init:
-        print >>init, "__all__ = %s\n" % str(chirp.drivers.__all__)
+        print(>>init, "__all__ = %s\n" % str(chirp.drivers.__all__))
 
-    print "Set chirp/drivers/__init__.py::__all__ = %s" % str(
+    print("Set chirp/drivers/__init__.py::__all__ = %s" % str()
         chirp.drivers.__all__)
 
 
@@ -97,7 +97,7 @@
 
     EXEC = 'bash ./build/macos/make_pango.sh ' + \
            '/opt/local dist/chirp-%s.app' % CHIRP_VERSION
-    # print "exec string: %s" % EXEC
+    # print("exec string: %s" % EXEC)
     os.system(EXEC)
 
 
@@ -117,7 +117,7 @@
     for f in _locale_files:
         locale_files.append(("share/chirp/%s" % os.path.dirname(f), [f]))
 
-    print "LOC: %s" % str(locale_files)
+    print("LOC: %s" % str(locale_files))
 
     xsd_files = glob("chirp*.xsd")
 
@@ -146,7 +146,7 @@
 
     f = file("MANIFEST.in", "w")
     for fn in files:
-        print >>f, fn
+        print(>>f, fn)
     f.close()
 
 
diff -r c26b3ea688ee share/make_supported.py
--- a/share/make_supported.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/share/make_supported.py	Sat Jun 06 02:06:40 2020 +0800
@@ -58,7 +58,7 @@
             try:
                 value = ", ".join([str(x) for x in value
                                    if not str(x).startswith("?")])
-            except Exception, e:
+            except Exception as e:
                 raise
 
         if key == "memory_bounds":
diff -r c26b3ea688ee tests/run_tests.py
--- a/tests/run_tests.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/tests/run_tests.py	Sat Jun 06 02:06:40 2020 +0800
@@ -135,7 +135,7 @@
         if self._make_reload:
             try:
                 self.open()
-            except Exception, e:
+            except Exception as e:
                 raise TestCrashError(get_tb(), e, "[Loading]")
 
         try:
@@ -145,7 +145,7 @@
 
         try:
             ret = fn(*args, **kwargs)
-        except Exception, e:
+        except Exception as e:
             if type(e) in self._ignored_exceptions:
                 raise e
             details = str(args) + str(kwargs)
@@ -159,7 +159,7 @@
         if self._make_reload:
             try:
                 self.close()
-            except Exception, e:
+            except Exception as e:
                 raise TestCrashError(get_tb(), e, "[Saving]")
 
         return ret
@@ -254,9 +254,9 @@
                     details += os.linesep.join(["%s:%s" % (k, v) for k, v
                                                 in b.__dict__.items()])
                     raise TestFailedError(msg, details)
-            except KeyError, e:
-                print sorted(a.__dict__.keys())
-                print sorted(b.__dict__.keys())
+            except KeyError as e:
+                print(sorted(a.__dict__.keys()))
+                print(sorted(b.__dict__.keys()))
                 raise
 
 
@@ -296,11 +296,11 @@
                                          src_mem)
             except import_logic.DestNotCompatible:
                 continue
-            except import_logic.ImportError, e:
+            except import_logic.ImportError as e:
                 failures.append(TestFailedError("<%i>: Import Failed: %s" %
                                                 (dst_number, e)))
                 continue
-            except Exception, e:
+            except Exception as e:
                 raise TestCrashError(get_tb(), e, "[Import]")
 
             self._wrapper.do("set_memory", dst_mem)
@@ -308,7 +308,7 @@
 
             try:
                 self.compare_mem(dst_mem, ret_mem)
-            except TestFailedError, e:
+            except TestFailedError as e:
                 failures.append(
                     TestFailedError("<%i>: %s" % (number, e), e.get_detail()))
 
@@ -363,7 +363,7 @@
 
                 try:
                     self.set_and_compare(m)
-                except errors.UnsupportedToneError, e:
+                except errors.UnsupportedToneError as e:
                     # If a radio doesn't support a particular tone value,
                     # don't punish it
                     pass
@@ -698,7 +698,7 @@
                 bank.set_name(testname)
             except AttributeError:
                 return [], []
-            except Exception, e:
+            except Exception as e:
                 if str(e) == "Not implemented":
                     return [], []
                 else:
@@ -863,7 +863,7 @@
 
         try:
             radio = directory.get_radio_by_image(filename)
-        except Exception, e:
+        except Exception as e:
             raise TestFailedError("Failed to detect", str(e))
 
         if radio.__class__.__name__ == 'DynamicRadioAlias':
@@ -929,7 +929,7 @@
         try:
             radio = self._wrapper._dst.__class__(serial)
             radio.status_fn = lambda s: True
-        except Exception, e:
+        except Exception as e:
             error = e
 
         if not live:
@@ -945,7 +945,7 @@
         error = None
         try:
             radio.sync_in()
-        except Exception, e:
+        except Exception as e:
             error = e
 
         if error is None:
@@ -964,7 +964,7 @@
         error = None
         try:
             radio.sync_out()
-        except Exception, e:
+        except Exception as e:
             error = e
 
         if error is None:
@@ -1002,7 +1002,7 @@
         pass
 
     def _print(self, string):
-        print >>self._out, string
+        print(>>self._out, string)
 
     def report(self, rclass, tc, msg, e):
         name = ("%s %s" % (rclass.MODEL, rclass.VARIANT))[:13]
@@ -1054,7 +1054,7 @@
         self._filename = filename
 
     def prepare(self):
-        print "Writing to %s" % self._filename,
+        print("Writing to %s" % self._filename,)
         sys.stdout.flush()
         self._out = file(self._filename, "w")
         s = """
@@ -1098,12 +1098,12 @@
   <th>Status</th><th>Message</th>
 </tr>
 """ % (CHIRP_VERSION, CHIRP_VERSION, time.strftime("%x at %X"), os.name)
-        print >>self._out, s
+        print(>>self._out, s)
 
     def cleanup(self):
-        print >>self._out, "</table></body>"
+        print(>>self._out, "</table></body>")
         self._out.close()
-        print "Done"
+        print("Done")
 
     def report(self, rclass, tc, msg, e):
         s = ("<tr class='%s'>" % msg) + \
@@ -1114,7 +1114,7 @@
             ("<td class='%s'>%s</td>" % (msg, msg)) + \
             ("<td class='error'>%s</td>" % e) + \
             "</tr>"
-        print >>self._out, s
+        print(>>self._out, s)
         sys.stdout.write(".")
         sys.stdout.flush()
 
@@ -1141,10 +1141,10 @@
     def log(self, rclass, tc, e):
         fn = "logs/%s_%s.log" % (directory.radio_class_id(rclass), tc)
         log = file(fn, "a")
-        print >>log, "---- Begin test %s ----" % tc
+        print(>>log, "---- Begin test %s ----" % tc)
         log.write(e.get_detail())
-        print >>log
-        print >>log, "---- End test %s ----" % tc
+        print(>>log)
+        print(>>log, "---- End test %s ----" % tc)
         log.close()
 
     def nuke_log(self, rclass, tc):
@@ -1171,18 +1171,18 @@
                         self.log(rclass, tc, e)
                     nfailed += 1
                     nprinted += 1
-            except TestFailedError, e:
+            except TestFailedError as e:
                 self.report(rclass, tc, "FAILED", e)
                 if e.get_detail():
                     self.log(rclass, tc, e)
                 nfailed += 1
                 nprinted += 1
-            except TestCrashError, e:
+            except TestCrashError as e:
                 self.report(rclass, tc, "CRASHED", e)
                 self.log(rclass, tc, e)
                 nfailed += 1
                 nprinted += 1
-            except TestSkippedError, e:
+            except TestSkippedError as e:
                 self.report(rclass, tc, "SKIPPED", e)
                 self.log(rclass, tc, e)
                 nprinted += 1
@@ -1293,7 +1293,7 @@
 
     if options.live:
         if not options.driver:
-            print "Live mode requires a driver to be specified"
+            print("Live mode requires a driver to be specified")
             sys.exit(1)
         failed = tr.run_one_live(options.driver, options.live)
     elif options.driver:
diff -r c26b3ea688ee tests/unit/test_chirp_common.py
--- a/tests/unit/test_chirp_common.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/tests/unit/test_chirp_common.py	Sat Jun 06 02:06:40 2020 +0800
@@ -227,7 +227,7 @@
 
     def test_is_fractional_step(self):
         for freq in self._125 + self._625:
-            print freq
+            print(freq)
             self.assertTrue(chirp_common.is_fractional_step(freq))
 
     def test_is_6_25(self):
diff -r c26b3ea688ee tools/bitdiff.py
--- a/tools/bitdiff.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/tools/bitdiff.py	Sat Jun 06 02:06:40 2020 +0800
@@ -11,9 +11,9 @@
 def printDiff(pos, byte1, byte2, args):
     bits1 = '{0:08b}'.format(byte1)
     bits2 = '{0:08b}'.format(byte2)
-    print "@%04Xh" % pos
-    print "1:%02Xh, %sb" % (byte1, bits1)
-    print "2:%02Xh, %sb" % (byte2, bits2)
+    print("@%04Xh" % pos)
+    print("1:%02Xh, %sb" % (byte1, bits1))
+    print("2:%02Xh, %sb" % (byte2, bits2))
     if args.csv:
         writeDiffCSV(pos, byte1, byte2, args)
 
@@ -53,7 +53,7 @@
             printDiff(pos, b1, b2, args)
 
     pos = f1.tell() - args.offset
-    print "bytes read: %02d" % pos
+    print("bytes read: %02d" % pos)
     f1.close()
     f2.close()
 
@@ -82,7 +82,7 @@
             printDiff(pos, b1, b2, args)
 
     pos = length
-    print "bytes read: %02d" % pos
+    print("bytes read: %02d" % pos)
 
 
 def convertFileToBin(args):
@@ -147,9 +147,9 @@
 if args.offset:
     args.offset = int(args.offset, 16)
 
-print "f1:", args.file1, " f2:", args.file2
+print("f1:", args.file1, " f2:", args.file2)
 if args.setting or args.value:
-    print "setting:", args.setting, "- value:", args.value
+    print("setting:", args.setting, "- value:", args.value)
 
 while True:
     if (args.dat):
@@ -162,5 +162,5 @@
         compareFiles(args)
     if not args.watch:
         break
-    print "------"
+    print("------")
     time.sleep(delay)
diff -r c26b3ea688ee tools/cpep8.py
--- a/tools/cpep8.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/tools/cpep8.py	Sat Jun 06 02:06:40 2020 +0800
@@ -90,25 +90,25 @@
     return ignore
 
 if args.update:
-    print "Starting update of %d files" % len(manifest)
+    print("Starting update of %d files" % len(manifest))
     bad = []
     for f in manifest:
         checker = pep8.StyleGuide(quiet=True, ignore=get_exceptions(f))
         results = checker.check_files([f])
         if results.total_errors:
             bad.append(f)
-        print "%s: %s" % (results.total_errors and "FAIL" or "PASS", f)
+        print("%s: %s" % (results.total_errors and "FAIL" or "PASS", f))
 
     with file(blacklist_filename, "w") as fh:
-        print >>fh, """\
+        print(>>fh, """\)
 # cpep8.blacklist: The list of files that do not meet PEP8 standards.
 # DO NOT ADD NEW FILES!!  Instead, fix the code to be compliant.
 # Over time, this list should shrink and (eventually) be eliminated."""
-        print >>fh, "\n".join(sorted(bad))
+        print(>>fh, "\n".join(sorted(bad)))
 
     if args.scan:
         with file(manifest_filename, "w") as fh:
-            print >>fh, "\n".join(sorted(manifest))
+            print(>>fh, "\n".join(sorted(manifest)))
     sys.exit(0)
 
 if args.files:
@@ -126,7 +126,7 @@
 total_errors = 0
 for f in check_list:
     if args.verbose:
-        print "Checking %s" % f
+        print("Checking %s" % f)
 
     checker = pep8.Checker(f, quiet=args.stats, ignore=get_exceptions(f))
     results = checker.check_all()
diff -r c26b3ea688ee tools/img2thd72.py
--- a/tools/img2thd72.py	Tue Jun 02 09:10:39 2020 -0700
+++ b/tools/img2thd72.py	Sat Jun 06 02:06:40 2020 +0800
@@ -24,7 +24,7 @@
 
 
 def die(msg):
-    print msg
+    print(msg)
     sys.exit(1)
 
 
@@ -66,26 +66,26 @@
             line += dots[(ord(buf[byte]) >> (y % 8)) & 0x01]
         lines.append(line)
     for l in lines:
-        print l
+        print(l)
 
 
 def usage():
-    print "\nUsage: %s <-s|-g> [-i] [-d] " \
+    print("\nUsage: %s <-s|-g> [-i] [-d] " \)
           "<image-file> <thd72-nvram-file>" % sys.argv[0]
-    print "\nThis program will modify whatever nvram file provided or will"
-    print "create a new one if the file does not exist.  After using this to"
-    print "modify the image, you can use that file to upload all or part of"
-    print "it to your radio"
-    print "\nOption explanations:"
-    print "  -s     Save as the startup image"
-    print "  -g     Save as the GPS logger image"
-    print "  -i     Invert colors (black for white)"
-    print "         Depending on the file format the bits may be inverted."
-    print "         If your bitmap file turns out to be inverted, use -i."
-    print "  -d     Display the bitmap as dots (for confirmation)"
-    print "         Each black pixel is '*' and each white pixel is ' '"
-    print "         This will print up to 120 dots wide, so beware your"
-    print "         terminal size."
+    print("\nThis program will modify whatever nvram file provided or will")
+    print("create a new one if the file does not exist.  After using this to")
+    print("modify the image, you can use that file to upload all or part of")
+    print("it to your radio")
+    print("\nOption explanations:")
+    print("  -s     Save as the startup image")
+    print("  -g     Save as the GPS logger image")
+    print("  -i     Invert colors (black for white)")
+    print("         Depending on the file format the bits may be inverted.")
+    print("         If your bitmap file turns out to be inverted, use -i.")
+    print("  -d     Display the bitmap as dots (for confirmation)")
+    print("         Each black pixel is '*' and each white pixel is ' '")
+    print("         This will print up to 120 dots wide, so beware your")
+    print("         terminal size.")
     sys.exit(1)
 
 if __name__ == "__main__":
@@ -124,4 +124,4 @@
     blocks.append(imgpos/256)
     blocks.append(1+imgpos/256)
     blocks.append(2+imgpos/256)
-    print "Modified block list:", blocks
+    print("Modified block list:", blocks)
diff -r c26b3ea688ee tools/serialsniff.c
--- a/tools/serialsniff.c	Tue Jun 02 09:10:39 2020 -0700
+++ b/tools/serialsniff.c	Sat Jun 06 02:06:40 2020 +0800
@@ -42,7 +42,7 @@
  * 03 MAR 2009 - Version 1.02
  *
  *		Added "--digits" switch, which when used on the command
- *		line allows for setting the number of hex digits print per
+ *		line allows for setting the number of hex digits print(per)
  *		line.
  *
  *		Added code to allow "-q" shorthand for "quiescent mode".
@@ -340,7 +340,7 @@
 	       "         --nameA=NAME	Set pathA name to NAME\n"
 	       "         --nameB=NAME	Set pathB name to NAME\n"
 	       "  --q,-q,--quiescent	Run in quiescent mode\n"
-	       "  --d,-d,--digits	Number of hex digits to print in one line\n\n"
+	       "  --d,-d,--digits	Number of hex digits to print(in one line\n\n")
 	       "  --d=nn or -d nn or --digits nn\n"
 	       "\n"
 	       );
